{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convertMap(Lambda.java:1042), ch.lambdaj.Lambda.convertMap(Lambda.java:1054), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1105)]"],"mutant":{"filename":"Lambda.java","line":1121,"block":138,"id":{"indexes":"[37]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/Map;","method":"map","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114)]"],"mutant":{"filename":"Lambda.java","line":280,"block":28,"id":{"indexes":"[38]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"count","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]"],"mutant":{"filename":"Lambda.java","line":658,"block":97,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"sumFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Lambda.java","line":833,"block":112,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"max","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.count(Lambda.java:280), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]"],"mutant":{"filename":"Lambda.java","line":280,"block":26,"id":{"indexes":"[31]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"count","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1126)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractProperty(Lambda.java:1103), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1085)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1095)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:448)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]"],"mutant":{"filename":"Lambda.java","line":1030,"block":127,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/Iterator;","method":"convertIterator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:506), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:506), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:506), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:506), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:506), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:506), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:506), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"Lambda.java","line":506,"block":71,"id":{"indexes":"[27]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/aggregate\/Aggregator;","method":"getSumAggregator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]"],"mutant":{"filename":"Lambda.java","line":972,"block":118,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"joinFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:414), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:414), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:414), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:414), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]"],"mutant":{"filename":"Lambda.java","line":413,"block":54,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectFirst","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:604), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]"],"mutant":{"filename":"Lambda.java","line":604,"block":80,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedSum","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]"],"mutant":{"filename":"Lambda.java","line":748,"block":107,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"min","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:31), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]"],"mutant":{"filename":"Lambda.java","line":1180,"block":143,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/String;Ljava\/lang\/Object;)Lch\/lambdaj\/function\/convert\/Converter;","method":"as","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]"],"mutant":{"filename":"Lambda.java","line":277,"block":28,"id":{"indexes":"[47]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"count","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Lambda.java","line":540,"block":75,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/aggregate\/Aggregator;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"Lambda.java","line":63,"block":3,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"on","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]"],"mutant":{"filename":"Lambda.java","line":182,"block":15,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/List;","method":"flatten","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]"],"mutant":{"filename":"Lambda.java","line":249,"block":21,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;I)Ljava\/util\/List;","method":"sort","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701)]"],"mutant":{"filename":"Lambda.java","line":615,"block":95,"id":{"indexes":"[45]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961)]"],"mutant":{"filename":"Lambda.java","line":948,"block":117,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"joinFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]"],"mutant":{"filename":"Lambda.java","line":1000,"block":123,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/String;","method":"join","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Lambda.java","line":691,"block":104,"id":{"indexes":"[30]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedAvg","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]"],"mutant":{"filename":"Lambda.java","line":371,"block":42,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/util\/Iterator;","method":"selectIterator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:108), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterator.next(ResettableIteratorOnIterator.java:57), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:205)]"],"mutant":{"filename":"Lambda.java","line":107,"block":8,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000)]"],"mutant":{"filename":"Lambda.java","line":997,"block":121,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/String;","method":"join","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testInvalidProjectDto(LambdaTest.java:559)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]"],"mutant":{"filename":"Lambda.java","line":1017,"block":125,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/List;","method":"convert","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]"],"mutant":{"filename":"Lambda.java","line":606,"block":82,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedSum","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]"],"mutant":{"filename":"Lambda.java","line":504,"block":68,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/aggregate\/Aggregator;","method":"getSumAggregator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:658)]"],"mutant":{"filename":"Lambda.java","line":612,"block":90,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:894), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:902)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:894), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:902)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:894), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:902)]"],"mutant":{"filename":"Lambda.java","line":388,"block":47,"id":{"indexes":"[34]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectUnique","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:31), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]"],"mutant":{"filename":"Lambda.java","line":1170,"block":142,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/convert\/Converter;","method":"as","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.convertMap(Lambda.java:1042), ch.lambdaj.Lambda.convertMap(Lambda.java:1054), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1105)]"],"mutant":{"filename":"Lambda.java","line":1133,"block":139,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"index","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]"],"mutant":{"filename":"Lambda.java","line":426,"block":56,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/util\/Collection;","method":"selectDistinct","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703)]"],"mutant":{"filename":"Lambda.java","line":611,"block":88,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]"],"mutant":{"filename":"Lambda.java","line":1160,"block":141,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;[Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/List;","method":"project","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedAvg(Lambda.java:689), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Lambda.java","line":689,"block":100,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedAvg","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"Lambda.java","line":573,"block":77,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;Lch\/lambdaj\/function\/aggregate\/Aggregator;)Ljava\/lang\/Object;","method":"aggregateFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]"],"mutant":{"filename":"Lambda.java","line":484,"block":65,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"selectMin","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]"],"mutant":{"filename":"Lambda.java","line":357,"block":41,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]"],"mutant":{"filename":"Lambda.java","line":217,"block":19,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/util\/List;","method":"collect","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.Lambda.selectUnique(Lambda.java:386), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]"],"mutant":{"filename":"Lambda.java","line":385,"block":43,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectUnique","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Lambda.java","line":610,"block":86,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]"],"mutant":{"filename":"Lambda.java","line":264,"block":24,"id":{"indexes":"[32]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/Comparator;)Ljava\/util\/List;","method":"sort","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]"],"mutant":{"filename":"Lambda.java","line":1193,"block":144,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Boolean;)Lch\/lambdaj\/function\/matcher\/HasArgumentWithValue;","method":"having","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"Lambda.java","line":110,"block":10,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711)]"],"mutant":{"filename":"Lambda.java","line":734,"block":106,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"avgFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1097)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]"],"mutant":{"filename":"Lambda.java","line":1018,"block":126,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/List;","method":"convert","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectUnique(Lambda.java:387), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:886)]"],"mutant":{"filename":"Lambda.java","line":387,"block":45,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectUnique","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]"],"mutant":{"filename":"Lambda.java","line":587,"block":78,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Number;","method":"sum","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]"],"mutant":{"filename":"Lambda.java","line":1080,"block":133,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"extractIterator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:678)]"],"mutant":{"filename":"Lambda.java","line":856,"block":113,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;","method":"maxFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]"],"mutant":{"filename":"Lambda.java","line":196,"block":17,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/List;","method":"collect","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]"],"mutant":{"filename":"Lambda.java","line":197,"block":18,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/List;","method":"collect","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]"],"mutant":{"filename":"Lambda.java","line":1043,"block":130,"id":{"indexes":"[36]","location":{"mdesc":"(Ljava\/util\/Map;Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/Map;","method":"convertMap","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:616)]"],"mutant":{"filename":"Lambda.java","line":308,"block":31,"id":{"indexes":"[6]","location":{"mdesc":"(Lorg\/hamcrest\/Matcher;Ljava\/lang\/Iterable;)Ljava\/util\/List;","method":"filter","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1169)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]"],"mutant":{"filename":"Lambda.java","line":614,"block":94,"id":{"indexes":"[40]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]"],"mutant":{"filename":"Lambda.java","line":1042,"block":129,"id":{"indexes":"[32]","location":{"mdesc":"(Ljava\/util\/Map;Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/Map;","method":"convertMap","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1169)]"],"mutant":{"filename":"Lambda.java","line":606,"block":84,"id":{"indexes":"[30]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedSum","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738)]"],"mutant":{"filename":"Lambda.java","line":806,"block":110,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"minFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Lambda.java","line":685,"block":99,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"avg","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Lambda.java","line":613,"block":92,"id":{"indexes":"[32]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalSumFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]"],"mutant":{"filename":"Lambda.java","line":637,"block":96,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;","method":"sumFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]"],"mutant":{"filename":"Lambda.java","line":93,"block":7,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:330), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:228)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]"],"mutant":{"filename":"Lambda.java","line":329,"block":33,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/util\/Iterator;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1118)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1118)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1118)]"],"mutant":{"filename":"Lambda.java","line":294,"block":30,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"count","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]"],"mutant":{"filename":"Lambda.java","line":318,"block":32,"id":{"indexes":"[6]","location":{"mdesc":"(Lorg\/hamcrest\/Matcher;[Ljava\/lang\/Object;)Ljava\/util\/List;","method":"filter","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]"],"mutant":{"filename":"Lambda.java","line":820,"block":111,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"max","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1000), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"Lambda.java","line":984,"block":119,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/String;","method":"join","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]"],"mutant":{"filename":"Lambda.java","line":610,"block":85,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Lambda.java","line":144,"block":12,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/util\/Iterator;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"Lambda.java","line":458,"block":59,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/util\/Collection;","method":"selectDistinctArgument","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782)]"],"mutant":{"filename":"Lambda.java","line":761,"block":108,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"min","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293)]"],"mutant":{"filename":"Lambda.java","line":236,"block":20,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/util\/List;","method":"sort","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]"],"mutant":{"filename":"Lambda.java","line":265,"block":24,"id":{"indexes":"[36]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/Comparator;)Ljava\/util\/List;","method":"sort","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]"],"mutant":{"filename":"Lambda.java","line":400,"block":49,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Z","method":"exists","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]"],"mutant":{"filename":"Lambda.java","line":400,"block":48,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Z","method":"exists","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]"],"mutant":{"filename":"Lambda.java","line":1148,"block":140,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;[Ljava\/lang\/Object;)Ljava\/util\/List;","method":"project","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]"],"mutant":{"filename":"Lambda.java","line":1117,"block":137,"id":{"indexes":"[33]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/convert\/Converter;)Ljava\/util\/Map;","method":"map","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1118)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1118)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1118)]"],"mutant":{"filename":"Lambda.java","line":282,"block":29,"id":{"indexes":"[51]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"count","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Lambda.java","line":129,"block":11,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]"],"mutant":{"filename":"Lambda.java","line":415,"block":53,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectFirst","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Lambda.java","line":604,"block":81,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedSum","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]"],"mutant":{"filename":"Lambda.java","line":1103,"block":135,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/util\/List;","method":"extractProperty","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"Lambda.java","line":1091,"block":134,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/List;","method":"extractString","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"Lambda.java","line":997,"block":120,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/String;","method":"join","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Lambda.java","line":689,"block":101,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedAvg","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:505), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"Lambda.java","line":505,"block":69,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/aggregate\/Aggregator;","method":"getSumAggregator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]"],"mutant":{"filename":"Lambda.java","line":902,"block":115,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;","method":"joinFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]"],"mutant":{"filename":"Lambda.java","line":263,"block":23,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/Comparator;)Ljava\/util\/List;","method":"sort","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:195)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]"],"mutant":{"filename":"Lambda.java","line":91,"block":5,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770)]"],"mutant":{"filename":"Lambda.java","line":505,"block":70,"id":{"indexes":"[22]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/aggregate\/Aggregator;","method":"getSumAggregator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]"],"mutant":{"filename":"Lambda.java","line":611,"block":87,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1169)]"],"mutant":{"filename":"Lambda.java","line":600,"block":79,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"sum","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699)]"],"mutant":{"filename":"Lambda.java","line":672,"block":98,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Number;","method":"avg","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:492)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]"],"mutant":{"filename":"Lambda.java","line":332,"block":35,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/util\/Iterator;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]"],"mutant":{"filename":"Lambda.java","line":612,"block":89,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:699), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]"],"mutant":{"filename":"Lambda.java","line":691,"block":102,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedAvg","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:387)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:616)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:425)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:492)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]"],"mutant":{"filename":"Lambda.java","line":345,"block":40,"id":{"indexes":"[15]","location":{"mdesc":"(Ljava\/lang\/Iterable;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:939)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"Lambda.java","line":470,"block":60,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/util\/Comparator;)Ljava\/util\/Collection;","method":"selectDistinct","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:931), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:939)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:931), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:939)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]"],"mutant":{"filename":"Lambda.java","line":472,"block":64,"id":{"indexes":"[36]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/util\/Comparator;)Ljava\/util\/Collection;","method":"selectDistinct","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Lambda.java","line":925,"block":116,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"joinFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"Lambda.java","line":167,"block":14,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Lambda.java","line":525,"block":74,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/aggregate\/Aggregator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355)]"],"mutant":{"filename":"Lambda.java","line":496,"block":66,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"selectMax","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]"],"mutant":{"filename":"Lambda.java","line":385,"block":44,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectUnique","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"Lambda.java","line":155,"block":13,"id":{"indexes":"[9]","location":{"mdesc":"([Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"forEach","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:417), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]"],"mutant":{"filename":"Lambda.java","line":417,"block":55,"id":{"indexes":"[30]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectFirst","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]"],"mutant":{"filename":"Lambda.java","line":447,"block":58,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/util\/Collection;","method":"selectDistinct","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:910), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:910), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]"],"mutant":{"filename":"Lambda.java","line":415,"block":52,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Ljava\/lang\/Object;","method":"selectFirst","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183)]"],"mutant":{"filename":"Lambda.java","line":400,"block":50,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Z","method":"exists","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:931), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:939)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:931), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:939)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]"],"mutant":{"filename":"Lambda.java","line":471,"block":63,"id":{"indexes":"[32]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/util\/Comparator;)Ljava\/util\/Collection;","method":"selectDistinct","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]"],"mutant":{"filename":"Lambda.java","line":613,"block":91,"id":{"indexes":"[30]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:225)]"],"mutant":{"filename":"Lambda.java","line":344,"block":39,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Iterable;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"Lambda.java","line":507,"block":73,"id":{"indexes":"[41]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/aggregate\/Aggregator;","method":"getSumAggregator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:229)]"],"mutant":{"filename":"Lambda.java","line":329,"block":34,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/util\/Iterator;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]"],"mutant":{"filename":"Lambda.java","line":1066,"block":132,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/util\/List;","method":"extract","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]"],"mutant":{"filename":"Lambda.java","line":614,"block":93,"id":{"indexes":"[38]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Number;","method":"typedZero","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalSumFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"Lambda.java","line":556,"block":76,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Iterable;Lch\/lambdaj\/function\/aggregate\/Aggregator;)Ljava\/lang\/Object;","method":"aggregateFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767)]"],"mutant":{"filename":"Lambda.java","line":506,"block":72,"id":{"indexes":"[33]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/aggregate\/Aggregator;","method":"getSumAggregator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"Lambda.java","line":713,"block":105,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;","method":"avgFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]"],"mutant":{"filename":"Lambda.java","line":344,"block":38,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Iterable;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]"],"mutant":{"filename":"Lambda.java","line":784,"block":109,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;","method":"minFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:931)]"],"mutant":{"filename":"Lambda.java","line":436,"block":57,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Collection;","method":"selectDistinct","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"Lambda.java","line":72,"block":4,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"argument","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:415), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.Lambda.filter(Lambda.java:308), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"Lambda.java","line":1204,"block":145,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Lch\/lambdaj\/function\/matcher\/HasArgumentWithValue;","method":"having","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]"],"mutant":{"filename":"Lambda.java","line":330,"block":36,"id":{"indexes":"[32]","location":{"mdesc":"(Ljava\/util\/Iterator;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:504), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"Lambda.java","line":504,"block":67,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/aggregate\/Aggregator;","method":"getSumAggregator","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]"],"mutant":{"filename":"Lambda.java","line":878,"block":114,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Iterable;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"maxFrom","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]"],"mutant":{"filename":"Lambda.java","line":1054,"block":131,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/util\/Map;Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"convertMap","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"Lambda.java","line":999,"block":122,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/String;","method":"join","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectStringsThatEndsWithD(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:921), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectStringsThatEndsWithD(LambdaTest.java:923)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilter(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:567), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:569), ch.lambdaj.LambdaTest.testFilter(LambdaTest.java:571)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:387)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:616)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:425)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFranceExposures(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:973), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectFranceExposures(LambdaTest.java:975)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:492)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]"],"mutant":{"filename":"Lambda.java","line":334,"block":37,"id":{"indexes":"[36]","location":{"mdesc":"(Ljava\/util\/Iterator;Lorg\/hamcrest\/Matcher;)Ljava\/util\/List;","method":"select","class":"ch.lambdaj.Lambda"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:658)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"ArgumentsFactory.java","line":257,"block":100,"id":{"indexes":"[30]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":108,"block":25,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":254,"block":95,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":112,"block":27,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getLastName(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$24e626ed.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]"],"mutant":{"filename":"ArgumentsFactory.java","line":186,"block":48,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":97,"block":19,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"placeholderToArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":60,"block":7,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"registerNewArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getLastName(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$24e626ed.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$CostItem$$EnhancerByCGLIB$$de25c62d.getCashOut(<generated>), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":186,"block":47,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":254,"block":94,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]"],"mutant":{"filename":"ArgumentsFactory.java","line":52,"block":6,"id":{"indexes":"[37]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"createArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":68,"block":11,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"createPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":182,"block":46,"id":{"indexes":"[20]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":268,"block":112,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLong","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":268,"block":113,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLong","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:658)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"ArgumentsFactory.java","line":276,"block":119,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isFloat","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":257,"block":101,"id":{"indexes":"[36]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":272,"block":118,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isDouble","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getLastName(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$f00e43b9.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]"],"mutant":{"filename":"ArgumentsFactory.java","line":186,"block":49,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":64,"block":8,"id":{"indexes":"[37]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"registerNewArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":39,"block":2,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:658)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"ArgumentsFactory.java","line":257,"block":101,"id":{"indexes":"[39]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":272,"block":115,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isDouble","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:658)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"ArgumentsFactory.java","line":276,"block":122,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isFloat","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getLastName(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$24e626ed.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest$CostItem$$EnhancerByCGLIB$$de25c62d.getCashOut(<generated>), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$3bc77ca7.getAge(<generated>), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":182,"block":44,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":54,"block":6,"id":{"indexes":"[41]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"createArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":63,"block":8,"id":{"indexes":"[33]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"registerNewArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:29), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:37), ch.lambdaj.Lambda.as(Lambda.java:1180), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":98,"block":22,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"placeholderToArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:658)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"ArgumentsFactory.java","line":272,"block":117,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isDouble","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":276,"block":120,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isFloat","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":112,"block":29,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$50b10902.getGender(<generated>), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$50b10902.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$50b10902.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$50b10902.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]"],"mutant":{"filename":"ArgumentsFactory.java","line":112,"block":31,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":255,"block":96,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":49,"block":3,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"createArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":264,"block":109,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isInt","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:658)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"ArgumentsFactory.java","line":272,"block":116,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isDouble","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":276,"block":121,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isFloat","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person.isFailingYoungerThan(Person.java:104), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:196), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":68,"block":9,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"createPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":264,"block":108,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isInt","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getAge(<generated>), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.getBirthDate(<generated>), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ef9973.toString(<generated>), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":80,"block":12,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/argument\/Argument;)V","method":"bindArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":187,"block":50,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":189,"block":52,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:29), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:37), ch.lambdaj.Lambda.as(Lambda.java:1180), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:97), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":97,"block":18,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"placeholderToArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":108,"block":26,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":255,"block":97,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":256,"block":98,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":108,"block":24,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:29), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:37), ch.lambdaj.Lambda.as(Lambda.java:1180), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":98,"block":20,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"placeholderToArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":112,"block":30,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:54), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:28), ch.lambdaj.Lambda.as(Lambda.java:1170), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"ArgumentsFactory.java","line":93,"block":17,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"actualArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":112,"block":28,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:29), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:37), ch.lambdaj.Lambda.as(Lambda.java:1180), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":92,"block":15,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"actualArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":189,"block":51,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"createArgumentPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":264,"block":110,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isInt","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":256,"block":99,"id":{"indexes":"[25]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Integer;)Ljava\/lang\/Object;","method":"getPrimitivePlaceHolder","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":108,"block":23,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"isLimitedValues","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"ArgumentsFactory.java","line":80,"block":13,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/argument\/Argument;)V","method":"bindArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1105)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1207)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ArgumentsFactory.java","line":51,"block":5,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Class;Lch\/lambdaj\/function\/argument\/InvocationSequence;)Ljava\/lang\/Object;","method":"createArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:55)]"],"mutant":{"filename":"ArgumentsFactory.java","line":264,"block":107,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isInt","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":268,"block":114,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLong","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:655)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentsFactory.java","line":268,"block":111,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isLong","class":"ch.lambdaj.function.argument.ArgumentsFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"IntrospectionUtil.java","line":25,"block":3,"id":{"indexes":"[20]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;)Ljava\/lang\/String;","method":"getPropertyName","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"IntrospectionUtil.java","line":39,"block":10,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]"],"mutant":{"filename":"IntrospectionUtil.java","line":39,"block":11,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:37), ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:39), ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:23), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]"],"mutant":{"filename":"IntrospectionUtil.java","line":37,"block":9,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1097)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]"],"mutant":{"filename":"IntrospectionUtil.java","line":45,"block":13,"id":{"indexes":"[76]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:39), ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:23), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]"],"mutant":{"filename":"IntrospectionUtil.java","line":39,"block":11,"id":{"indexes":"[29]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"IntrospectionUtil.java","line":25,"block":2,"id":{"indexes":"[15]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;)Ljava\/lang\/String;","method":"getPropertyName","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"IntrospectionUtil.java","line":25,"block":1,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;)Ljava\/lang\/String;","method":"getPropertyName","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"IntrospectionUtil.java","line":27,"block":7,"id":{"indexes":"[57]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;)Ljava\/lang\/String;","method":"getPropertyName","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:39), ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:23), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1126)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:39), ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractProperty(Lambda.java:1103), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1085)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPlainPropertyValue(IntrospectionUtil.java:61), ch.lambdaj.util.IntrospectionUtil.getBooleanPropertyValue(IntrospectionUtil.java:53), ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:45), ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:23), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:39), ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1095)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:39), ch.lambdaj.function.compare.PropertyComparator.compare(PropertyComparator.java:34), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinct(Lambda.java:447), ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:437)]"],"mutant":{"filename":"IntrospectionUtil.java","line":39,"block":10,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:43), ch.lambdaj.util.IntrospectionUtil.getPropertyValue(IntrospectionUtil.java:39), ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:23), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]"],"mutant":{"filename":"IntrospectionUtil.java","line":43,"block":12,"id":{"indexes":"[66]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1097)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]"],"mutant":{"filename":"IntrospectionUtil.java","line":37,"block":8,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"IntrospectionUtil.java","line":51,"block":14,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getBooleanPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1097)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]"],"mutant":{"filename":"IntrospectionUtil.java","line":53,"block":15,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getBooleanPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1097)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]"],"mutant":{"filename":"IntrospectionUtil.java","line":59,"block":16,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/String;)Ljava\/lang\/Object;","method":"getPlainPropertyValue","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"IntrospectionUtil.java","line":25,"block":3,"id":{"indexes":"[20]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;)Ljava\/lang\/String;","method":"getPropertyName","class":"ch.lambdaj.util.IntrospectionUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.<init>(Invocation.java:35), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.<init>(Invocation.java:35), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.<init>(Invocation.java:35), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]"],"mutant":{"filename":"Invocation.java","line":34,"block":5,"id":{"indexes":"[71]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]"],"mutant":{"filename":"Invocation.java","line":47,"block":13,"id":{"indexes":"[40]","location":{"mdesc":"()[Ljava\/lang\/Object;","method":"getConcreteArgs","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"Invocation.java","line":32,"block":1,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":101,"block":35,"id":{"indexes":"[21]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"Invocation.java","line":84,"block":27,"id":{"indexes":"[9]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":115,"block":40,"id":{"indexes":"[29]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":102,"block":36,"id":{"indexes":"[37]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":100,"block":34,"id":{"indexes":"[8]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":104,"block":37,"id":{"indexes":"[58]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":116,"block":41,"id":{"indexes":"[37]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":113,"block":42,"id":{"indexes":"[41]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"Invocation.java","line":66,"block":18,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/String;","method":"getInvokedPropertyName","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":103,"block":37,"id":{"indexes":"[52]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":113,"block":38,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6e86984.getCountryName(<generated>), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getGender(<generated>), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getLastName(<generated>), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBirthDate(<generated>), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6e86984.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6e86984.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$CostItem$$EnhancerByCGLIB$$c02808c4.getCashOut(<generated>), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$27fe8153.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:103), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"Invocation.java","line":103,"block":36,"id":{"indexes":"[43]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":120,"block":44,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z","method":"areNullSafeEquals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":120,"block":49,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z","method":"areNullSafeEquals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":35,"block":3,"id":{"indexes":"[50]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":120,"block":46,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z","method":"areNullSafeEquals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":114,"block":39,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":120,"block":45,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z","method":"areNullSafeEquals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:54), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:140), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.AliasedArgumentConverter$1.getValue(AliasedArgumentConverter.java:47), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:32), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:140), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:140), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.Invocation.getConcreteArgs(Invocation.java:46), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:140), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"Invocation.java","line":45,"block":10,"id":{"indexes":"[5]","location":{"mdesc":"()[Ljava\/lang\/Object;","method":"getConcreteArgs","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.toString(Invocation.java:89), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.toString(Invocation.java:89), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"Invocation.java","line":34,"block":5,"id":{"indexes":"[76]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"Invocation.java","line":72,"block":20,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.<init>(Invocation.java:35), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ffe6e110.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.<init>(Invocation.java:35), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ffe6e110.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.<init>(Invocation.java:35), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ffe6e110.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]"],"mutant":{"filename":"Invocation.java","line":34,"block":5,"id":{"indexes":"[76]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"Invocation.java","line":67,"block":19,"id":{"indexes":"[15]","location":{"mdesc":"()Ljava\/lang\/String;","method":"getInvokedPropertyName","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":101,"block":35,"id":{"indexes":"[16]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]"],"mutant":{"filename":"Invocation.java","line":92,"block":32,"id":{"indexes":"[75]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":45,"block":11,"id":{"indexes":"[8]","location":{"mdesc":"()[Ljava\/lang\/Object;","method":"getConcreteArgs","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":100,"block":33,"id":{"indexes":"[5]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":101,"block":35,"id":{"indexes":"[22]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]"],"mutant":{"filename":"Invocation.java","line":47,"block":13,"id":{"indexes":"[40]","location":{"mdesc":"()[Ljava\/lang\/Object;","method":"getConcreteArgs","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"Invocation.java","line":32,"block":1,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"Invocation.java","line":32,"block":0,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":74,"block":23,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":120,"block":47,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z","method":"areNullSafeEquals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":102,"block":36,"id":{"indexes":"[36]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]"],"mutant":{"filename":"Invocation.java","line":88,"block":31,"id":{"indexes":"[70]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"Invocation.java","line":113,"block":43,"id":{"indexes":"[44]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]"],"mutant":{"filename":"Invocation.java","line":89,"block":29,"id":{"indexes":"[49]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60)]"],"mutant":{"filename":"Invocation.java","line":62,"block":17,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/Class;","method":"getReturnType","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":31,"block":0,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Invocation.java","line":103,"block":37,"id":{"indexes":"[51]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":58,"block":16,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/reflect\/Method;","method":"getInvokedMethod","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"Invocation.java","line":84,"block":26,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]"],"mutant":{"filename":"Invocation.java","line":88,"block":31,"id":{"indexes":"[70]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"Invocation.java","line":120,"block":48,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z","method":"areNullSafeEquals","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.toString(Invocation.java:88), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:160), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]"],"mutant":{"filename":"Invocation.java","line":88,"block":31,"id":{"indexes":"[66]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Invocation.java","line":54,"block":15,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/Class;","method":"getInvokedClass","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]"],"mutant":{"filename":"Invocation.java","line":50,"block":14,"id":{"indexes":"[44]","location":{"mdesc":"()[Ljava\/lang\/Object;","method":"getConcreteArgs","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]"],"mutant":{"filename":"Invocation.java","line":47,"block":13,"id":{"indexes":"[34]","location":{"mdesc":"()[Ljava\/lang\/Object;","method":"getConcreteArgs","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.Invocation.invokeOn(Invocation.java:72), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"Invocation.java","line":72,"block":22,"id":{"indexes":"[15]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6e86984.getCountryName(<generated>), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getGender(<generated>), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getLastName(<generated>), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBirthDate(<generated>), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6e86984.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6e86984.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$CostItem$$EnhancerByCGLIB$$c02808c4.getCashOut(<generated>), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$bd5cbb7a.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getAge(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Invocation.hashCode(Invocation.java:102), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$1dc9bf3e.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"Invocation.java","line":102,"block":35,"id":{"indexes":"[28]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.Invocation"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"InvocationSequence.java","line":101,"block":25,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":114,"block":30,"id":{"indexes":"[38]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]"],"mutant":{"filename":"InvocationSequence.java","line":117,"block":31,"id":{"indexes":"[55]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"InvocationSequence.java","line":73,"block":14,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/String;","method":"getInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":78,"block":17,"id":{"indexes":"[7]","location":{"mdesc":"()Ljava\/lang\/String;","method":"calcInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"InvocationSequence.java","line":155,"block":48,"id":{"indexes":"[46]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"InvocationSequence.java","line":153,"block":48,"id":{"indexes":"[35]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":111,"block":29,"id":{"indexes":"[16]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"InvocationSequence.java","line":82,"block":18,"id":{"indexes":"[29]","location":{"mdesc":"()Ljava\/lang\/String;","method":"calcInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:54), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.AliasedArgumentConverter$1.getValue(AliasedArgumentConverter.java:47), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:32), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"InvocationSequence.java","line":65,"block":10,"id":{"indexes":"[56]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/InvocationSequence;Lch\/lambdaj\/function\/argument\/Invocation;)V","method":"<init>","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"InvocationSequence.java","line":161,"block":50,"id":{"indexes":"[21]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/StringBuilder;Z)V","method":"toString","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"InvocationSequence.java","line":159,"block":50,"id":{"indexes":"[11]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/StringBuilder;Z)V","method":"toString","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":115,"block":30,"id":{"indexes":"[42]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"InvocationSequence.java","line":102,"block":24,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"InvocationSequence.java","line":78,"block":16,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/String;","method":"calcInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:159), ch.lambdaj.function.argument.InvocationSequence.toString(InvocationSequence.java:153), ch.lambdaj.function.argument.Argument.toString(Argument.java:64), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"InvocationSequence.java","line":159,"block":49,"id":{"indexes":"[4]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/StringBuilder;Z)V","method":"toString","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"InvocationSequence.java","line":87,"block":20,"id":{"indexes":"[12]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/StringBuilder;)V","method":"calcInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":121,"block":33,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"evaluate","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:28), ch.lambdaj.Lambda.as(Lambda.java:1170), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:82), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"InvocationSequence.java","line":81,"block":18,"id":{"indexes":"[23]","location":{"mdesc":"()Ljava\/lang\/String;","method":"calcInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"InvocationSequence.java","line":131,"block":35,"id":{"indexes":"[37]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"evaluate","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$7d587c73.getCountryName(<generated>), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getGender(<generated>), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getLastName(<generated>), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getBirthDate(<generated>), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$7d587c73.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$7d587c73.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$CostItem$$EnhancerByCGLIB$$36981bb3.getCashOut(<generated>), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$fd17870c.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:111), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9439d22d.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"InvocationSequence.java","line":69,"block":13,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/Class;","method":"getRootInvokedClass","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":63,"block":7,"id":{"indexes":"[35]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/InvocationSequence;Lch\/lambdaj\/function\/argument\/Invocation;)V","method":"<init>","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]"],"mutant":{"filename":"InvocationSequence.java","line":110,"block":28,"id":{"indexes":"[8]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:141), ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"InvocationSequence.java","line":141,"block":40,"id":{"indexes":"[23]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"InvocationSequence.java","line":140,"block":39,"id":{"indexes":"[11]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"InvocationSequence.java","line":101,"block":26,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":114,"block":30,"id":{"indexes":"[37]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"InvocationSequence.java","line":101,"block":22,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":139,"block":38,"id":{"indexes":"[6]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60)]"],"mutant":{"filename":"InvocationSequence.java","line":93,"block":21,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/Class;","method":"getReturnType","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":64,"block":9,"id":{"indexes":"[45]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/InvocationSequence;Lch\/lambdaj\/function\/argument\/Invocation;)V","method":"<init>","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"InvocationSequence.java","line":74,"block":15,"id":{"indexes":"[14]","location":{"mdesc":"()Ljava\/lang\/String;","method":"getInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"InvocationSequence.java","line":101,"block":23,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:54), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.Lambda.map(Lambda.java:1119), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:34), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.AliasedArgumentConverter$1.getValue(AliasedArgumentConverter.java:47), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:32), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:121), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"InvocationSequence.java","line":121,"block":32,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"evaluate","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:87), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:81), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:28), ch.lambdaj.Lambda.as(Lambda.java:1170), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:87), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:81), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:87), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:81), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:87), ch.lambdaj.function.argument.InvocationSequence.calcInkvokedPropertyName(InvocationSequence.java:81), ch.lambdaj.function.argument.InvocationSequence.getInkvokedPropertyName(InvocationSequence.java:73), ch.lambdaj.function.argument.Argument.getInkvokedPropertyName(Argument.java:31), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"InvocationSequence.java","line":86,"block":19,"id":{"indexes":"[4]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/StringBuilder;)V","method":"calcInkvokedPropertyName","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.hashCode(InvocationSequence.java:114), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"InvocationSequence.java","line":113,"block":30,"id":{"indexes":"[50]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator.compare(ComparatorUtil.java:55), ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator.compare(ComparatorUtil.java:55), ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.MaxOnArgument.chooseOnArgument(MaxOnArgument.java:32), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:38), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.MaxOnArgument.chooseOnArgument(MaxOnArgument.java:32), ch.lambdaj.function.aggregate.ChooserOnArgument.choose(ChooserOnArgument.java:38), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator.compare(ComparatorUtil.java:55), ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator.compare(ComparatorUtil.java:55), ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest$1.compare(LambdaTest.java:1), ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator.compare(ComparatorUtil.java:55), ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.getSumAggregator(Lambda.java:507), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"InvocationSequence.java","line":139,"block":37,"id":{"indexes":"[4]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/Invocation;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"InvocationSequence.java","line":152,"block":46,"id":{"indexes":"[18]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":63,"block":6,"id":{"indexes":"[30]","location":{"mdesc":"(Lch\/lambdaj\/function\/argument\/InvocationSequence;Lch\/lambdaj\/function\/argument\/Invocation;)V","method":"<init>","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"InvocationSequence.java","line":110,"block":27,"id":{"indexes":"[5]","location":{"mdesc":"()I","method":"hashCode","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.InvocationSequence.invokeOn(InvocationSequence.java:135), ch.lambdaj.function.argument.InvocationSequence.evaluate(InvocationSequence.java:131), ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"InvocationSequence.java","line":135,"block":36,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invokeOn","class":"ch.lambdaj.function.argument.InvocationSequence"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ProxyUtil.java","line":75,"block":26,"id":{"indexes":"[5]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createIterableProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:211)]"],"mutant":{"filename":"ProxyUtil.java","line":60,"block":23,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Class;Z)Ljava\/lang\/Object;","method":"manageUnproxableClass","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":55,"block":19,"id":{"indexes":"[116]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":92,"block":33,"id":{"indexes":"[23]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/MethodInterceptor;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Lnet\/sf\/cglib\/proxy\/Enhancer;","method":"createEnhancer","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$cf5bdb21.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":51,"block":13,"id":{"indexes":"[64]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":55,"block":21,"id":{"indexes":"[131]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":101,"block":38,"id":{"indexes":"[10]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:51), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":105,"block":42,"id":{"indexes":"[48]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ProxyUtil.java","line":76,"block":28,"id":{"indexes":"[21]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createIterableProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":45,"block":6,"id":{"indexes":"[5]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:51), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":106,"block":42,"id":{"indexes":"[52]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"ProxyUtil.java","line":45,"block":7,"id":{"indexes":"[18]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:141)]"],"mutant":{"filename":"ProxyUtil.java","line":55,"block":14,"id":{"indexes":"[77]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":55,"block":15,"id":{"indexes":"[84]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ba44de2f.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ba44de2f.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ba44de2f.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), com.sun.proxy.$Proxy6.setLastName(Unknown Source), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ba44de2f.setBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ba44de2f.setBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$NoEmptyConstructorPerson$$EnhancerByLambdajWithCGLIB$$b5902355.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]"],"mutant":{"filename":"ProxyUtil.java","line":75,"block":27,"id":{"indexes":"[7]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createIterableProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createNativeJavaProxy(ProxyUtil.java:97), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:51), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":104,"block":42,"id":{"indexes":"[38]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$e7cdd1eb.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":33,"block":1,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isProxable","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":49,"block":12,"id":{"indexes":"[56]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.concatClasses(ProxyUtil.java:104), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.concatClasses(ProxyUtil.java:104), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.concatClasses(ProxyUtil.java:104), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.concatClasses(ProxyUtil.java:104), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.concatClasses(ProxyUtil.java:104), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.concatClasses(ProxyUtil.java:104), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:51), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":103,"block":42,"id":{"indexes":"[27]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":102,"block":39,"id":{"indexes":"[14]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":91,"block":32,"id":{"indexes":"[16]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/MethodInterceptor;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Lnet\/sf\/cglib\/proxy\/Enhancer;","method":"createEnhancer","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:446), net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25), net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$a0cdf6e9.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":52,"block":16,"id":{"indexes":"[89]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":60,"block":24,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Class;Z)Ljava\/lang\/Object;","method":"manageUnproxableClass","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":53,"block":20,"id":{"indexes":"[124]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.avgFrom(Lambda.java:713), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ProxyUtil.java","line":81,"block":31,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"normalizeProxiedClass","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:46), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":46,"block":8,"id":{"indexes":"[23]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":101,"block":36,"id":{"indexes":"[4]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$dd35ac78.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":55,"block":17,"id":{"indexes":"[99]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":101,"block":37,"id":{"indexes":"[7]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:48), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":48,"block":10,"id":{"indexes":"[34]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$cd4c7a6.toString(<generated>), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"ProxyUtil.java","line":92,"block":34,"id":{"indexes":"[26]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/MethodInterceptor;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Lnet\/sf\/cglib\/proxy\/Enhancer;","method":"createEnhancer","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":55,"block":18,"id":{"indexes":"[106]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:446), net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25), net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]"],"mutant":{"filename":"ProxyUtil.java","line":33,"block":5,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isProxable","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ProxyUtil.java","line":80,"block":29,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"normalizeProxiedClass","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:81)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:101)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFailingForEach(LambdaTest.java:124)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:90)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:55), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":55,"block":11,"id":{"indexes":"[49]","location":{"mdesc":"(Lch\/lambdaj\/proxy\/InvocationInterceptor;Ljava\/lang\/Class;Z[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:45), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]"],"mutant":{"filename":"ProxyUtil.java","line":80,"block":30,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"normalizeProxiedClass","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyUtil.java","line":102,"block":41,"id":{"indexes":"[20]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$19635d82.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":33,"block":3,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isProxable","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$e933982a.toString(<generated>), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"ProxyUtil.java","line":92,"block":32,"id":{"indexes":"[20]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/MethodInterceptor;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Lnet\/sf\/cglib\/proxy\/Enhancer;","method":"createEnhancer","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":102,"block":40,"id":{"indexes":"[17]","location":{"mdesc":"([Ljava\/lang\/Class;[Ljava\/lang\/Class;)[Ljava\/lang\/Class;","method":"concatClasses","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:446), net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25), net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$de79aa9d.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":33,"block":2,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isProxable","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]"],"mutant":{"filename":"ProxyUtil.java","line":97,"block":35,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/ClassLoader;Ljava\/lang\/reflect\/InvocationHandler;[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createNativeJavaProxy","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:333), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":90,"block":32,"id":{"indexes":"[11]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/MethodInterceptor;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Lnet\/sf\/cglib\/proxy\/Enhancer;","method":"createEnhancer","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$70f00ec3.toString(<generated>), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"ProxyUtil.java","line":92,"block":33,"id":{"indexes":"[23]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/MethodInterceptor;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Lnet\/sf\/cglib\/proxy\/Enhancer;","method":"createEnhancer","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:49), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyUtil.java","line":93,"block":34,"id":{"indexes":"[30]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/MethodInterceptor;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Lnet\/sf\/cglib\/proxy\/Enhancer;","method":"createEnhancer","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.manageUnproxableClass(ProxyUtil.java:61), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:53), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$45549490.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ProxyUtil.java","line":33,"block":4,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/Class;)Z","method":"isProxable","class":"ch.lambdaj.proxy.ProxyUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"Sum.java","line":41,"block":11,"id":{"indexes":"[46]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:70), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:44), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:70), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:44), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"Sum.java","line":70,"block":36,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/math\/BigDecimal;)Ljava\/math\/BigDecimal;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"Sum.java","line":70,"block":38,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/math\/BigDecimal;)Ljava\/math\/BigDecimal;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Sum.java","line":42,"block":13,"id":{"indexes":"[57]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d8631223.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Sum.java","line":39,"block":6,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"Sum.java","line":70,"block":35,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/math\/BigDecimal;)Ljava\/math\/BigDecimal;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9023a167.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9023a167.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9023a167.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$9023a167.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:40), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Sum.java","line":40,"block":8,"id":{"indexes":"[29]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Sum.java","line":40,"block":9,"id":{"indexes":"[35]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$4cccba3c.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$4cccba3c.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$4cccba3c.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$4cccba3c.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Sum.java","line":41,"block":10,"id":{"indexes":"[40]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Sum.java","line":37,"block":5,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718)]"],"mutant":{"filename":"Sum.java","line":50,"block":19,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Integer;)Ljava\/lang\/Integer;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718)]"],"mutant":{"filename":"Sum.java","line":50,"block":21,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Integer;)Ljava\/lang\/Integer;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"Sum.java","line":44,"block":17,"id":{"indexes":"[79]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]"],"mutant":{"filename":"Sum.java","line":58,"block":27,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Float;)Ljava\/lang\/Float;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671)]"],"mutant":{"filename":"Sum.java","line":66,"block":34,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/math\/BigInteger;)Ljava\/math\/BigInteger;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Sum.java","line":39,"block":7,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Sum.java","line":62,"block":30,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Double;)Ljava\/lang\/Double;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:42), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:42), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b60d5aaa.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:42), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b60d5aaa.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:42), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b60d5aaa.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:42), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b60d5aaa.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Sum.java","line":42,"block":12,"id":{"indexes":"[51]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]"],"mutant":{"filename":"Sum.java","line":62,"block":30,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Double;)Ljava\/lang\/Double;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:43), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$aaa7ef71.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:43), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$aaa7ef71.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$aaa7ef71.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:43), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$aaa7ef71.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:43), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"Sum.java","line":43,"block":14,"id":{"indexes":"[62]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Sum.java","line":50,"block":21,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Integer;)Ljava\/lang\/Integer;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]"],"mutant":{"filename":"Sum.java","line":62,"block":28,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Double;)Ljava\/lang\/Double;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]"],"mutant":{"filename":"Sum.java","line":58,"block":27,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Float;)Ljava\/lang\/Float;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671)]"],"mutant":{"filename":"Sum.java","line":43,"block":15,"id":{"indexes":"[68]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Sum.java","line":37,"block":3,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$aaa7ef71.getAgeAsBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:46), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"Sum.java","line":44,"block":16,"id":{"indexes":"[73]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:66), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:43), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ed7dd1e3.getAgeAsBigInteger(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671)]"],"mutant":{"filename":"Sum.java","line":66,"block":32,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/math\/BigInteger;)Ljava\/math\/BigInteger;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]"],"mutant":{"filename":"Sum.java","line":58,"block":25,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Float;)Ljava\/lang\/Float;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671)]"],"mutant":{"filename":"Sum.java","line":66,"block":31,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/math\/BigInteger;)Ljava\/math\/BigInteger;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Sum.java","line":37,"block":2,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Sum"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalSumFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:33), ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:23), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:33), ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:23), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:33), ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:23), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:33), ch.lambdaj.util.iterator.IteratorFactory.discoverGenericType(IteratorFactory.java:23), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.avgFrom(Lambda.java:713), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"IteratorFactory.java","line":32,"block":2,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Class;","method":"discoverGenericType","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]"],"mutant":{"filename":"IteratorFactory.java","line":95,"block":32,"id":{"indexes":"[20]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/util\/List;","method":"flattenIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalSumFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.avgFrom(Lambda.java:713), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"IteratorFactory.java","line":23,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Iterable;)Ljava\/lang\/Class;","method":"discoverGenericType","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:200)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$c18f85f2.getCountryName(<generated>), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$4d4d5823.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Text$$EnhancerByCGLIB$$1e65ff08.toString(<generated>), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$13a0bb70.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"IteratorFactory.java","line":69,"block":21,"id":{"indexes":"[22]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:577)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:840)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectUnique(Lambda.java:384), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:599)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]"],"mutant":{"filename":"IteratorFactory.java","line":52,"block":13,"id":{"indexes":"[32]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"IteratorFactory.java","line":49,"block":8,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]"],"mutant":{"filename":"IteratorFactory.java","line":53,"block":16,"id":{"indexes":"[48]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:840)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:53), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]"],"mutant":{"filename":"IteratorFactory.java","line":53,"block":15,"id":{"indexes":"[43]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$aa7f5840.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:53), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$aa7f5840.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"IteratorFactory.java","line":71,"block":25,"id":{"indexes":"[45]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"IteratorFactory.java","line":71,"block":24,"id":{"indexes":"[39]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"IteratorFactory.java","line":70,"block":23,"id":{"indexes":"[33]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:70), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:109), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:144), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:217)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:70), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:70), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"IteratorFactory.java","line":70,"block":22,"id":{"indexes":"[27]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:840)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]"],"mutant":{"filename":"IteratorFactory.java","line":96,"block":33,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/util\/List;","method":"flattenIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:931), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:939)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:931), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:939)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testInvalidCollect(LambdaTest.java:875)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testInvalidProjectDto(LambdaTest.java:559)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]"],"mutant":{"filename":"IteratorFactory.java","line":49,"block":7,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]"],"mutant":{"filename":"IteratorFactory.java","line":52,"block":14,"id":{"indexes":"[38]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:948), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.joinFrom(Lambda.java:972), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:69), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.minFrom(Lambda.java:806), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.maxFrom(Lambda.java:878), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:69), ch.lambdaj.Lambda.forEach(Lambda.java:109), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:69), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:69), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:69), ch.lambdaj.Lambda.forEach(Lambda.java:167), ch.lambdaj.Lambda.forEach(Lambda.java:155), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:73), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.avgFrom(Lambda.java:713), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"IteratorFactory.java","line":69,"block":20,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:577)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:841), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:843), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:845), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:847)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1126)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractProperty(Lambda.java:1103), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1085)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:825), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:827), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:829), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinct(Lambda.java:436), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:930)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1095)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinct(Lambda.java:447), ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:437)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.map(Lambda.java:1116), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectFirst(Lambda.java:412), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.map(Lambda.java:1116), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectIterator(Lambda.java:371), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.selectUnique(Lambda.java:384), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$2bd7200b.toString(<generated>), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:599)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=com.sun.proxy.$Proxy4.toString(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"IteratorFactory.java","line":50,"block":9,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"IteratorFactory.java","line":35,"block":4,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Class;","method":"discoverGenericType","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:195)]"],"mutant":{"filename":"IteratorFactory.java","line":68,"block":19,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExists(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1175), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1177), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1179), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1181), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1183), ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.Lambda.exists(Lambda.java:400), ch.lambdaj.LambdaTest.testExists(LambdaTest.java:1185)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:840)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1126)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractProperty(Lambda.java:1103), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1085)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinct(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinct(Lambda.java:436), ch.lambdaj.LambdaTest.testSelectDistinct(LambdaTest.java:930)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1095)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinct(Lambda.java:447), ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:437)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.map(Lambda.java:1117), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:413), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.map(Lambda.java:1117), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.sort(Lambda.java:263), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectDistinct(Lambda.java:471), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:890)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.hasNext(ConverterIterator.java:30), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"IteratorFactory.java","line":50,"block":10,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asResettableIterator(IteratorFactory.java:71), ch.lambdaj.Lambda.forEach(Lambda.java:90), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:195)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"IteratorFactory.java","line":68,"block":18,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"asResettableIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1016), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1018), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1020), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1022), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1024), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.LambdaTest.testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(LambdaTest.java:1026)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:577)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:840)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1002), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1004), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1006), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1008), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:1010)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.selectUnique(Lambda.java:384), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:599)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:51), ch.lambdaj.Lambda.convertIterator(Lambda.java:1030), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedSum(Lambda.java:605), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:54), ch.lambdaj.Lambda.typedAvg(Lambda.java:690), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"IteratorFactory.java","line":51,"block":11,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.sumFrom(Lambda.java:637), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:666)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:902), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.joinFrom(Lambda.java:925), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:75), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:556), ch.lambdaj.Lambda.avgFrom(Lambda.java:713), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"IteratorFactory.java","line":35,"block":6,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Class;","method":"discoverGenericType","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten2(LambdaTest.java:840)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]"],"mutant":{"filename":"IteratorFactory.java","line":90,"block":30,"id":{"indexes":"[29]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/List;","method":"flattenIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinEmptyStringWithSeparatorAlwaysProduceEmptyString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:36), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:901)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"IteratorFactory.java","line":51,"block":12,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Iterator;","method":"asIterator","class":"ch.lambdaj.util.iterator.IteratorFactory"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Avg.java","line":32,"block":7,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Avg.java","line":34,"block":12,"id":{"indexes":"[54]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:35), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"Avg.java","line":35,"block":13,"id":{"indexes":"[59]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"Avg.java","line":36,"block":16,"id":{"indexes":"[79]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Avg.java","line":31,"block":6,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Avg.java","line":30,"block":4,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Avg.java","line":33,"block":10,"id":{"indexes":"[40]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Avg.java","line":33,"block":9,"id":{"indexes":"[35]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Avg.java","line":18,"block":1,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Avg.java","line":33,"block":10,"id":{"indexes":"[42]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Avg.java","line":26,"block":2,"id":{"indexes":"[15]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"Avg.java","line":25,"block":2,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Number;Ljava\/lang\/Number;)Ljava\/lang\/Number;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.function.aggregate.Avg.divide(Avg.java:31), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c135e45f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"Avg.java","line":30,"block":3,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]"],"mutant":{"filename":"Avg.java","line":34,"block":12,"id":{"indexes":"[52]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"Avg.java","line":36,"block":15,"id":{"indexes":"[71]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718)]"],"mutant":{"filename":"Avg.java","line":31,"block":6,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Avg.java","line":35,"block":14,"id":{"indexes":"[66]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Avg.java","line":30,"block":3,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Avg.java","line":32,"block":8,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"Avg.java","line":31,"block":5,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"Avg.java","line":34,"block":11,"id":{"indexes":"[47]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Avg.java","line":32,"block":8,"id":{"indexes":"[30]","location":{"mdesc":"(Ljava\/lang\/Number;I)Ljava\/lang\/Number;","method":"divide","class":"ch.lambdaj.function.aggregate.Avg"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyAggregator.java","line":36,"block":9,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1166)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"ProxyAggregator.java","line":29,"block":1,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$df5c4f8b.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$2f61d664.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711)]"],"mutant":{"filename":"ProxyAggregator.java","line":37,"block":10,"id":{"indexes":"[33]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"ProxyAggregator.java","line":34,"block":4,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"ProxyAggregator.java","line":35,"block":7,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyAggregator.java","line":43,"block":15,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeNullResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724)]"],"mutant":{"filename":"ProxyAggregator.java","line":38,"block":12,"id":{"indexes":"[43]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]"],"mutant":{"filename":"ProxyAggregator.java","line":34,"block":5,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ef1e3501.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1166)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"ProxyAggregator.java","line":29,"block":2,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ProxyAggregator.java","line":49,"block":18,"id":{"indexes":"[10]","location":{"mdesc":"(Lch\/lambdaj\/util\/iterator\/ResettableIterator;Lch\/lambdaj\/function\/aggregate\/Aggregator;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxyAggregator","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1166)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711)]"],"mutant":{"filename":"ProxyAggregator.java","line":37,"block":11,"id":{"indexes":"[39]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyAggregator.java","line":42,"block":14,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeNullResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$f0b977cf.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$f81047d2.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711)]"],"mutant":{"filename":"ProxyAggregator.java","line":35,"block":6,"id":{"indexes":"[15]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ProxyAggregator.normalizeNullResult(ProxyAggregator.java:44), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$f759fff4.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeNullResult(ProxyAggregator.java:44), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$f759fff4.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ProxyAggregator.normalizeNullResult(ProxyAggregator.java:44), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$f759fff4.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeNullResult(ProxyAggregator.java:44), ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:34), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$f759fff4.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]"],"mutant":{"filename":"ProxyAggregator.java","line":44,"block":17,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeNullResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyAggregator.java","line":42,"block":13,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeNullResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyAggregator.java","line":43,"block":16,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeNullResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$2371180.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.ProxyAggregator.normalizeResult(ProxyAggregator.java:36), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$34111e63.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:723)]"],"mutant":{"filename":"ProxyAggregator.java","line":36,"block":8,"id":{"indexes":"[22]","location":{"mdesc":"(Ljava\/lang\/Class;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"normalizeResult","class":"ch.lambdaj.function.aggregate.ProxyAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyIterator.java","line":51,"block":7,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:81)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:101)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFailingForEach(LambdaTest.java:124)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:90)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), com.sun.proxy.$Proxy4.iterator(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), com.sun.proxy.$Proxy4.iterator(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), com.sun.proxy.$Proxy4.iterator(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), com.sun.proxy.$Proxy4.iterator(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), com.sun.proxy.$Proxy4.iterator(Unknown Source), ch.lambdaj.util.iterator.IteratorFactory.asIterator(IteratorFactory.java:50), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:141)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$f6d3ccf4.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:807)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]"],"mutant":{"filename":"ProxyIterator.java","line":39,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]"],"mutant":{"filename":"ProxyIterator.java","line":101,"block":19,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/util\/Iterator;","method":"iterator","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]"],"mutant":{"filename":"ProxyIterator.java","line":60,"block":10,"id":{"indexes":"[53]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:81)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:101)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFailingForEach(LambdaTest.java:124)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:90)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:141)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:807)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]"],"mutant":{"filename":"ProxyIterator.java","line":40,"block":3,"id":{"indexes":"[15]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:81)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:101)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFailingForEach(LambdaTest.java:124)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:90)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:141)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:807)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$2b101395.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:707), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:709), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$32d897a8.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:711), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"ProxyIterator.java","line":55,"block":15,"id":{"indexes":"[83]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"ProxyIterator.java","line":92,"block":18,"id":{"indexes":"[11]","location":{"mdesc":"(Lch\/lambdaj\/util\/iterator\/ResettableIterator;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"createProxyIterator","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"ProxyIterator.java","line":71,"block":16,"id":{"indexes":"[90]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyIterator.java","line":52,"block":8,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ae4074c7.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ae4074c7.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ae4074c7.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), com.sun.proxy.$Proxy5.setLastName(Unknown Source), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ae4074c7.setBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$ae4074c7.setBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$NoEmptyConstructorPerson$$EnhancerByLambdajWithCGLIB$$66d0d8e6.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]"],"mutant":{"filename":"ProxyIterator.java","line":40,"block":4,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673)]"],"mutant":{"filename":"ProxyIterator.java","line":53,"block":8,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]"],"mutant":{"filename":"ProxyIterator.java","line":61,"block":11,"id":{"indexes":"[58]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]"],"mutant":{"filename":"ProxyIterator.java","line":81,"block":17,"id":{"indexes":"[9]","location":{"mdesc":"(Lch\/lambdaj\/util\/iterator\/ResettableIterator;Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"createProxyIterator","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]"],"mutant":{"filename":"ProxyIterator.java","line":93,"block":18,"id":{"indexes":"[15]","location":{"mdesc":"(Lch\/lambdaj\/util\/iterator\/ResettableIterator;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"createProxyIterator","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:81)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:101)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFailingForEach(LambdaTest.java:124)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:90)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:141)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:807)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:718), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:724), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:730)]"],"mutant":{"filename":"ProxyIterator.java","line":51,"block":6,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Lch\/lambdaj\/util\/iterator\/ResettableIterator;","method":"iterateOnValues","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]"],"mutant":{"filename":"ProxyIterator.java","line":39,"block":2,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.proxy.ProxyIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:237), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]"],"mutant":{"filename":"ClassImposterizer.java","line":120,"block":6,"id":{"indexes":"[54]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ClassImposterizer.java","line":106,"block":3,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Class;Z)V","method":"setConstructorsAccessible","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.setConstructorsAccessible(ClassImposterizer.java:105), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:99), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.setConstructorsAccessible(ClassImposterizer.java:105), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:99), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.setConstructorsAccessible(ClassImposterizer.java:105), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:99), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$4dadbfdc.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":105,"block":3,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Class;Z)V","method":"setConstructorsAccessible","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]"],"mutant":{"filename":"ClassImposterizer.java","line":135,"block":9,"id":{"indexes":"[22]","location":{"mdesc":"(Ljava\/lang\/Class;Lnet\/sf\/cglib\/proxy\/Callback;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ClassImposterizer.java","line":120,"block":8,"id":{"indexes":"[60]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ClassImposterizer.java","line":105,"block":3,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Class;Z)V","method":"setConstructorsAccessible","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ClassImposterizer.java","line":116,"block":6,"id":{"indexes":"[29]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$e417913f.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":111,"block":5,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:375), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$e42c15fc.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":115,"block":6,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ClassImposterizer.java","line":114,"block":6,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.setConstructorsAccessible(ClassImposterizer.java:105), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:99), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.setConstructorsAccessible(ClassImposterizer.java:105), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:99), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ClassImposterizer.setConstructorsAccessible(ClassImposterizer.java:105), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:99), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$edf73570.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":105,"block":3,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Class;Z)V","method":"setConstructorsAccessible","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:354), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:354), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:354), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b160e3.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":119,"block":6,"id":{"indexes":"[48]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":101,"block":1,"id":{"indexes":"[22]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/Callback;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"imposterise","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ClassImposterizer.java","line":99,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Lnet\/sf\/cglib\/proxy\/Callback;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"imposterise","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":136,"block":9,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Class;Lnet\/sf\/cglib\/proxy\/Callback;)Ljava\/lang\/Object;","method":"createProxy","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=org.objenesis.ObjenesisBase.getInstantiatorOf(ObjenesisBase.java:74), org.objenesis.ObjenesisBase.newInstance(ObjenesisBase.java:59), ch.lambdaj.proxy.ClassImposterizer.createProxy(ClassImposterizer.java:134), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=org.objenesis.ObjenesisBase.getInstantiatorOf(ObjenesisBase.java:74), org.objenesis.ObjenesisBase.newInstance(ObjenesisBase.java:59), ch.lambdaj.proxy.ClassImposterizer.createProxy(ClassImposterizer.java:134), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=org.objenesis.ObjenesisBase.getInstantiatorOf(ObjenesisBase.java:74), org.objenesis.ObjenesisBase.newInstance(ObjenesisBase.java:59), ch.lambdaj.proxy.ClassImposterizer.createProxy(ClassImposterizer.java:134), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:101), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b293f08b.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":122,"block":8,"id":{"indexes":"[65]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:337), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:81), ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:337), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.proxy.ProxyUtil.createIterableProxy(ProxyUtil.java:76), ch.lambdaj.function.aggregate.ProxyAggregator.createProxyAggregator(ProxyAggregator.java:49), ch.lambdaj.Lambda.aggregateFrom(Lambda.java:573), ch.lambdaj.Lambda.sumFrom(Lambda.java:658), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:337), net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:371), net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317), ch.lambdaj.proxy.ClassImposterizer.createProxyClass(ClassImposterizer.java:122), ch.lambdaj.proxy.ClassImposterizer.imposterise(ClassImposterizer.java:100), ch.lambdaj.proxy.ProxyUtil.createProxy(ProxyUtil.java:52), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:69), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d1cea1ec.getBigDecimalIncome(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:726)]"],"mutant":{"filename":"ClassImposterizer.java","line":118,"block":6,"id":{"indexes":"[43]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;","method":"createProxyClass","class":"ch.lambdaj.proxy.ClassImposterizer"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":57,"block":14,"id":{"indexes":"[45]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"convert","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ConstructorArgumentConverter.java","line":43,"block":11,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/reflect\/Constructor;[Ljava\/lang\/Object;)Z","method":"isCompatible","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":35,"block":8,"id":{"indexes":"[104]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":35,"block":8,"id":{"indexes":"[100]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:32), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":25,"block":1,"id":{"indexes":"[34]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":35,"block":8,"id":{"indexes":"[104]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:32), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":41,"block":10,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/reflect\/Constructor;[Ljava\/lang\/Object;)Z","method":"isCompatible","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ConstructorArgumentConverter.java","line":24,"block":3,"id":{"indexes":"[45]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":53,"block":13,"id":{"indexes":"[37]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"convert","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":34,"block":6,"id":{"indexes":"[74]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ConstructorArgumentConverter.java","line":24,"block":3,"id":{"indexes":"[49]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:32), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":24,"block":3,"id":{"indexes":"[49]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:32), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":31,"block":4,"id":{"indexes":"[54]","location":{"mdesc":"(Ljava\/lang\/Class;[Ljava\/lang\/Object;)V","method":"<init>","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:54), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]"],"mutant":{"filename":"ConstructorArgumentConverter.java","line":54,"block":13,"id":{"indexes":"[28]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"convert","class":"ch.lambdaj.function.convert.ConstructorArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":148,"block":16,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Enum;","method":"getNextEnumPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getNextEnumPlaceholder(ArgumentsFactory.java:147), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getNextPlaceholder(ArgumentsFactory.java:138), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$2902d98a.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getNextEnumPlaceholder(ArgumentsFactory.java:147), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getNextPlaceholder(ArgumentsFactory.java:138), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$2902d98a.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getNextEnumPlaceholder(ArgumentsFactory.java:147), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getNextPlaceholder(ArgumentsFactory.java:138), ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$2902d98a.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]"],"mutant":{"filename":"ArgumentsFactory.java","line":138,"block":10,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"getNextPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"ArgumentsFactory.java","line":133,"block":9,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"getArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":148,"block":16,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Enum;","method":"getNextEnumPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":124,"block":3,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;)I","method":"booleanToInt","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"ArgumentsFactory.java","line":142,"block":13,"id":{"indexes":"[6]","location":{"mdesc":"()Z","method":"getNextBooleanPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:80), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$83a9fb81.getGender(<generated>), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$83a9fb81.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$83a9fb81.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.setArgument(ArgumentsFactory.java:129), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:52), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$83a9fb81.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]"],"mutant":{"filename":"ArgumentsFactory.java","line":128,"block":4,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Lch\/lambdaj\/function\/argument\/Argument;)V","method":"setArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.booleanToInt(ArgumentsFactory.java:124), ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder.getArgument(ArgumentsFactory.java:133), ch.lambdaj.function.argument.ArgumentsFactory.placeholderToArgument(ArgumentsFactory.java:98), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:91), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"ArgumentsFactory.java","line":133,"block":7,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Lch\/lambdaj\/function\/argument\/Argument;","method":"getArgument","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"ArgumentsFactory.java","line":138,"block":12,"id":{"indexes":"[15]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Object;","method":"getNextPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":143,"block":15,"id":{"indexes":"[17]","location":{"mdesc":"()Z","method":"getNextBooleanPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":148,"block":16,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Class;)Ljava\/lang\/Enum;","method":"getNextEnumPlaceholder","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ArgumentsFactory.java","line":124,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)I","method":"booleanToInt","class":"ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:295)]"],"mutant":{"filename":"ComparatorUtil.java","line":38,"block":10,"id":{"indexes":"[12]","location":{"mdesc":"(I)Ljava\/util\/Comparator;","method":"getStandardComparator","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ComparatorUtil.java","line":29,"block":5,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/util\/Comparator;Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"nullSafeCompare","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:375), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:377)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"ComparatorUtil.java","line":30,"block":6,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/util\/Comparator;Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"nullSafeCompare","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]"],"mutant":{"filename":"ComparatorUtil.java","line":36,"block":9,"id":{"indexes":"[8]","location":{"mdesc":"(I)Ljava\/util\/Comparator;","method":"getStandardComparator","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"ComparatorUtil.java","line":30,"block":8,"id":{"indexes":"[25]","location":{"mdesc":"(Ljava\/util\/Comparator;Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"nullSafeCompare","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"ComparatorUtil.java","line":29,"block":2,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/util\/Comparator;Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"nullSafeCompare","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:328)]"],"mutant":{"filename":"ComparatorUtil.java","line":42,"block":12,"id":{"indexes":"[20]","location":{"mdesc":"(I)Ljava\/util\/Comparator;","method":"getStandardComparator","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ComparatorUtil.java","line":29,"block":3,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/util\/Comparator;Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"nullSafeCompare","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]"],"mutant":{"filename":"ComparatorUtil.java","line":25,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"nullSafeCompare","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.compare.ComparatorUtil.nullSafeCompare(ComparatorUtil.java:30), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:319)]"],"mutant":{"filename":"ComparatorUtil.java","line":40,"block":11,"id":{"indexes":"[16]","location":{"mdesc":"(I)Ljava\/util\/Comparator;","method":"getStandardComparator","class":"ch.lambdaj.function.compare.ComparatorUtil"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectUnique(Lambda.java:387), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]"],"mutant":{"filename":"MatchingIterator.java","line":48,"block":9,"id":{"indexes":"[17]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:894), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:902)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:894), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:902)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:894), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:902)]"],"mutant":{"filename":"MatchingIterator.java","line":58,"block":12,"id":{"indexes":"[23]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]"],"mutant":{"filename":"MatchingIterator.java","line":47,"block":7,"id":{"indexes":"[7]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]"],"mutant":{"filename":"MatchingIterator.java","line":47,"block":6,"id":{"indexes":"[5]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]"],"mutant":{"filename":"MatchingIterator.java","line":48,"block":8,"id":{"indexes":"[14]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]"],"mutant":{"filename":"MatchingIterator.java","line":36,"block":3,"id":{"indexes":"[30]","location":{"mdesc":"()V","method":"searchNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectUnique(Lambda.java:387), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]"],"mutant":{"filename":"MatchingIterator.java","line":48,"block":7,"id":{"indexes":"[12]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]"],"mutant":{"filename":"MatchingIterator.java","line":36,"block":4,"id":{"indexes":"[33]","location":{"mdesc":"()V","method":"searchNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectUnique(Lambda.java:387), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]"],"mutant":{"filename":"MatchingIterator.java","line":38,"block":2,"id":{"indexes":"[21]","location":{"mdesc":"()V","method":"searchNext","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.Lambda.selectUnique(Lambda.java:386), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:886)]"],"mutant":{"filename":"MatchingIterator.java","line":55,"block":10,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.MatchingIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Argument.java","line":72,"block":6,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:51), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:62), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:67)]"],"mutant":{"filename":"Argument.java","line":64,"block":5,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/String;","method":"toString","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:49), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:60)]"],"mutant":{"filename":"Argument.java","line":56,"block":4,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/Class;","method":"getReturnType","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Argument.java","line":72,"block":9,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:45), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:56), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:65)]"],"mutant":{"filename":"Argument.java","line":31,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/String;","method":"getInkvokedPropertyName","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Argument.java","line":72,"block":7,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:53)]"],"mutant":{"filename":"Argument.java","line":72,"block":8,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.compare.ArgumentComparator.compare(ArgumentComparator.java:65), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.Argument.evaluate(Argument.java:41), ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:70), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:72)]"],"mutant":{"filename":"Argument.java","line":41,"block":2,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"evaluate","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:47), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:58)]"],"mutant":{"filename":"Argument.java","line":48,"block":3,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/Class;","method":"getRootArgumentClass","class":"ch.lambdaj.function.argument.Argument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":46,"block":7,"id":{"indexes":"[37]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":40,"block":2,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$59e84665.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$59e84665.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$59e84665.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$59e84665.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":42,"block":9,"id":{"indexes":"[51]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$db6bdd65.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$db6bdd65.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$db6bdd65.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$db6bdd65.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":51,"block":14,"id":{"indexes":"[88]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:998)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":57,"block":15,"id":{"indexes":"[93]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":44,"block":5,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":55,"block":13,"id":{"indexes":"[76]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Concat.java","line":40,"block":3,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testJoin(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoin(LambdaTest.java:947)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:994), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]"],"mutant":{"filename":"Concat.java","line":53,"block":11,"id":{"indexes":"[63]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Concat"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterator.next(ResettableIteratorOnIterator.java:57), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":52,"block":8,"id":{"indexes":"[16]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bf131011.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":44,"block":3,"id":{"indexes":"[10]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d9daea7e.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":51,"block":7,"id":{"indexes":"[10]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:101)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFailingForEach(LambdaTest.java:129)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":44,"block":5,"id":{"indexes":"[15]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterator.next(ResettableIteratorOnIterator.java:51), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":51,"block":6,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:101)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":44,"block":2,"id":{"indexes":"[6]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:110), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":55,"block":9,"id":{"indexes":"[33]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$d9daea7e.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]"],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":44,"block":4,"id":{"indexes":"[12]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ResettableIteratorOnIterator.java","line":36,"block":1,"id":{"indexes":"[13]","location":{"mdesc":"()V","method":"reset","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.matcher.OrMatcher.matches(OrMatcher.java:25), ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]"],"mutant":{"filename":"OrMatcher.java","line":25,"block":4,"id":{"indexes":"[29]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.OrMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]"],"mutant":{"filename":"OrMatcher.java","line":36,"block":6,"id":{"indexes":"[7]","location":{"mdesc":"([Lorg\/hamcrest\/Matcher;)Lch\/lambdaj\/function\/matcher\/OrMatcher;","method":"or","class":"ch.lambdaj.function.matcher.OrMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]"],"mutant":{"filename":"OrMatcher.java","line":25,"block":3,"id":{"indexes":"[23]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.OrMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]"],"mutant":{"filename":"OrMatcher.java","line":25,"block":2,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.OrMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]"],"mutant":{"filename":"OrMatcher.java","line":26,"block":5,"id":{"indexes":"[33]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.OrMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.matcher.OrMatcher.matches(OrMatcher.java:25), ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]"],"mutant":{"filename":"OrMatcher.java","line":25,"block":4,"id":{"indexes":"[25]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.OrMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]"],"mutant":{"filename":"OrMatcher.java","line":25,"block":4,"id":{"indexes":"[29]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.OrMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:577)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$59e84665.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:37), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$59e84665.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:599)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]"],"mutant":{"filename":"ResettableIteratorOnArray.java","line":37,"block":4,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnArray"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:577)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$246abf33.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:37), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$246abf33.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:599)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]"],"mutant":{"filename":"ResettableIteratorOnArray.java","line":38,"block":6,"id":{"indexes":"[19]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnArray"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]"],"mutant":{"filename":"ResettableIteratorOnArray.java","line":30,"block":2,"id":{"indexes":"[10]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnArray"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]"],"mutant":{"filename":"ResettableIteratorOnArray.java","line":38,"block":6,"id":{"indexes":"[22]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnArray"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:577)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$4e6b6ec9.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:37), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$4e6b6ec9.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:599)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]"],"mutant":{"filename":"ResettableIteratorOnArray.java","line":30,"block":3,"id":{"indexes":"[13]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnArray"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:578), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:580), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:582)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:831)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:111), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:113), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:115)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:887)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:600), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:602), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:604), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:606)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:37), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]"],"mutant":{"filename":"ResettableIteratorOnArray.java","line":30,"block":1,"id":{"indexes":"[8]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnArray"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFilterArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterArray(LambdaTest.java:577)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFlatten1(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:95), ch.lambdaj.util.iterator.IteratorFactory.flattenIterator(IteratorFactory.java:86), ch.lambdaj.Lambda.flatten(Lambda.java:182), ch.lambdaj.LambdaTest.testFlatten1(LambdaTest.java:824)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$db6bdd65.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:992), ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:52), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.join(Lambda.java:999), ch.lambdaj.Lambda.join(Lambda.java:984), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:996)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:37), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.proxy.ProxyIterator.invoke(ProxyIterator.java:40), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$db6bdd65.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterOnCustomMatcher(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnArray.next(ResettableIteratorOnArray.java:38), ch.lambdaj.Lambda.select(Lambda.java:331), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.Lambda.filter(Lambda.java:318), ch.lambdaj.LambdaTest.testFilterOnCustomMatcher(LambdaTest.java:599)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]"],"mutant":{"filename":"ResettableIteratorOnArray.java","line":30,"block":1,"id":{"indexes":"[8]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnArray"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]"],"mutant":{"filename":"HasArgumentWithValue.java","line":58,"block":6,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Boolean;)Lch\/lambdaj\/function\/matcher\/HasArgumentWithValue;","method":"havingValue","class":"ch.lambdaj.function.matcher.HasArgumentWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:910), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:910), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectUnique(Lambda.java:387), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]"],"mutant":{"filename":"HasArgumentWithValue.java","line":33,"block":3,"id":{"indexes":"[18]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.HasArgumentWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:913)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:512)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:385), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:388), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:390)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:614), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:617), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:619)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:423), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:426), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:428), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:430)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:898)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:500), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:502), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:504)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]"],"mutant":{"filename":"HasArgumentWithValue.java","line":31,"block":1,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.HasArgumentWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.selectFirst(Lambda.java:415), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.Lambda.filter(Lambda.java:308), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:398), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.util.iterator.MatchingIterator.next(MatchingIterator.java:55), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:400), ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:402)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.MatchingIterator.searchNext(MatchingIterator.java:38), ch.lambdaj.util.iterator.MatchingIterator.hasNext(MatchingIterator.java:47), ch.lambdaj.Lambda.selectUnique(Lambda.java:385), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]"],"mutant":{"filename":"HasArgumentWithValue.java","line":70,"block":7,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Object;Lorg\/hamcrest\/Matcher;)Lch\/lambdaj\/function\/matcher\/HasArgumentWithValue;","method":"havingValue","class":"ch.lambdaj.function.matcher.HasArgumentWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:492)]"],"mutant":{"filename":"HasArgumentWithValue.java","line":35,"block":4,"id":{"indexes":"[25]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.HasArgumentWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"HasArgumentWithValue.java","line":31,"block":2,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.HasArgumentWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Chooser.java","line":23,"block":3,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Chooser"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Chooser.java","line":22,"block":2,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Chooser"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Chooser.java","line":24,"block":5,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Chooser"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$eda15227.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$eda15227.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$eda15227.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$eda15227.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$eda15227.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.aggregate.Chooser.emptyItem(Chooser.java:40), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:23), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Chooser.java","line":40,"block":6,"id":{"indexes":"[4]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"emptyItem","class":"ch.lambdaj.function.aggregate.Chooser"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.min(Lambda.java:748), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.max(Lambda.java:820), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$c3e2dff6.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Min.choose(Min.java:22), ch.lambdaj.function.aggregate.Min.choose(Min.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.aggregate.Max.choose(Max.java:22), ch.lambdaj.function.aggregate.Max.choose(Max.java:1), ch.lambdaj.function.aggregate.Chooser.aggregate(Chooser.java:24), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Chooser.java","line":22,"block":1,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Chooser"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Chooser.java","line":23,"block":4,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.Chooser"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ChooserOnArgument.java","line":37,"block":4,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"choose","class":"ch.lambdaj.function.aggregate.ChooserOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ChooserOnArgument.java","line":35,"block":2,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"choose","class":"ch.lambdaj.function.aggregate.ChooserOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]"],"mutant":{"filename":"ChooserOnArgument.java","line":37,"block":3,"id":{"indexes":"[24]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"choose","class":"ch.lambdaj.function.aggregate.ChooserOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]"],"mutant":{"filename":"ChooserOnArgument.java","line":35,"block":1,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"choose","class":"ch.lambdaj.function.aggregate.ChooserOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]"],"mutant":{"filename":"ChooserOnArgument.java","line":38,"block":5,"id":{"indexes":"[35]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"choose","class":"ch.lambdaj.function.aggregate.ChooserOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyArgument.java","line":33,"block":4,"id":{"indexes":"[27]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.function.argument.ProxyArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6a0c8adb.getCountryName(<generated>), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getGender(<generated>), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getLastName(<generated>), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:58), ch.lambdaj.Lambda.having(Lambda.java:1193), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getFloat(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getBirthDate(<generated>), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:800)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6a0c8adb.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6a0c8adb.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$CostItem$$EnhancerByCGLIB$$234c2a1b.getCashOut(<generated>), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$bd5cbb7a.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getAge(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:457), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getGender(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:466)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:33), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$80ede095.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyArgument.java","line":33,"block":3,"id":{"indexes":"[19]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.function.argument.ProxyArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ProxyArgument.java","line":32,"block":2,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.function.argument.ProxyArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.equals(<generated>), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:81), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$fda41ccc.equals(<generated>), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:81), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getGender(<generated>), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getLastName(<generated>), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getFirstName(<generated>), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getFirstName(<generated>), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:29), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.isFailingYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnFailingMethod(LambdaTest.java:491)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getFirstName(<generated>), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:473)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.equals(<generated>), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:81), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:803)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$fda41ccc.equals(<generated>), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:81), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$fda41ccc.getCountryName(<generated>), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest$CostItem$$EnhancerByCGLIB$$b6e3bc0c.equals(<generated>), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:81), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$7d469489.equals(<generated>), ch.lambdaj.function.argument.ArgumentsFactory.bindArgument(ArgumentsFactory.java:81), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:63), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:39), ch.lambdaj.Lambda.on(Lambda.java:63), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.mock.Person$$EnhancerByCGLIB$$14857286.getBestFriend(<generated>), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyArgument.java","line":32,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.function.argument.ProxyArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:29), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:37), ch.lambdaj.Lambda.as(Lambda.java:1180), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:803)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"ProxyArgument.java","line":36,"block":5,"id":{"indexes":"[47]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"invoke","class":"ch.lambdaj.function.argument.ProxyArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ComparatorUtil.java","line":54,"block":4,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"ComparatorUtil.java","line":55,"block":5,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"ComparatorUtil.java","line":55,"block":7,"id":{"indexes":"[25]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:277)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"ComparatorUtil.java","line":54,"block":1,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ComparatorUtil.java","line":54,"block":2,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]"],"mutant":{"filename":"ComparatorUtil.java","line":78,"block":1,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$IgnoreCaseArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ComparatorUtil.java","line":78,"block":4,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$IgnoreCaseArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ComparatorUtil.java","line":78,"block":2,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$IgnoreCaseArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]"],"mutant":{"filename":"ComparatorUtil.java","line":79,"block":7,"id":{"indexes":"[26]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$IgnoreCaseArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]"],"mutant":{"filename":"ComparatorUtil.java","line":79,"block":5,"id":{"indexes":"[16]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$IgnoreCaseArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:30), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]"],"mutant":{"filename":"ProjectConverter.java","line":30,"block":2,"id":{"indexes":"[46]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"convert","class":"ch.lambdaj.function.convert.ProjectConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]"],"mutant":{"filename":"ProjectConverter.java","line":34,"block":3,"id":{"indexes":"[50]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"convert","class":"ch.lambdaj.function.convert.ProjectConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]"],"mutant":{"filename":"ProjectConverter.java","line":30,"block":2,"id":{"indexes":"[46]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"convert","class":"ch.lambdaj.function.convert.ProjectConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:30), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]"],"mutant":{"filename":"ProjectConverter.java","line":30,"block":2,"id":{"indexes":"[42]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map;","method":"convert","class":"ch.lambdaj.function.convert.ProjectConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462)]"],"mutant":{"filename":"Invocation.java","line":128,"block":3,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation$ParameterReference"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"Invocation.java","line":128,"block":4,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation$ParameterReference"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462)]"],"mutant":{"filename":"Invocation.java","line":128,"block":2,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation$ParameterReference"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:462)]"],"mutant":{"filename":"Invocation.java","line":128,"block":1,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"equals","class":"ch.lambdaj.function.argument.Invocation$ParameterReference"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:534), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1062), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1064), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1068)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:520), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testInvalidProjectDto(LambdaTest.java:559)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1048)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:701), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:703), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:705), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:715), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:721), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:727)]"],"mutant":{"filename":"ConverterIterator.java","line":30,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.function.convert.ConverterIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1097)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:537), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:539)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ConverterIterator.java","line":37,"block":2,"id":{"indexes":"[9]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.function.convert.ConverterIterator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"PairAggregator.java","line":24,"block":1,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.PairAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b948369.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1205), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1208), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1211)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$6c90ca09.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"PairAggregator.java","line":24,"block":3,"id":{"indexes":"[21]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.PairAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:25), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$da878ae2.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:25), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$da878ae2.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:25), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$da878ae2.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:25), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$da878ae2.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Avg.divide(Avg.java:37), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"PairAggregator.java","line":25,"block":4,"id":{"indexes":"[25]","location":{"mdesc":"(Ljava\/util\/Iterator;)Ljava\/lang\/Object;","method":"aggregate","class":"ch.lambdaj.function.aggregate.PairAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355)]"],"mutant":{"filename":"MaxOnArgument.java","line":32,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"chooseOnArgument","class":"ch.lambdaj.function.aggregate.MaxOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"MaxOnArgument.java","line":32,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"chooseOnArgument","class":"ch.lambdaj.function.aggregate.MaxOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:344)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:355)]"],"mutant":{"filename":"MaxOnArgument.java","line":32,"block":3,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"chooseOnArgument","class":"ch.lambdaj.function.aggregate.MaxOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:237), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:239)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:247), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:249)]"],"mutant":{"filename":"HasNestedPropertyWithValue.java","line":35,"block":1,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.HasNestedPropertyWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectPersonWith4LettersName(LambdaTest.java:236)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterPersonWith4LettersName(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.Lambda.filter(Lambda.java:308), ch.lambdaj.LambdaTest.testFilterPersonWith4LettersName(LambdaTest.java:246)]"],"mutant":{"filename":"HasNestedPropertyWithValue.java","line":61,"block":4,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/String;Lorg\/hamcrest\/Matcher;)Lorg\/hamcrest\/Matcher;","method":"hasNestedProperty","class":"ch.lambdaj.function.matcher.HasNestedPropertyWithValue"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]"],"mutant":{"filename":"MinOnArgument.java","line":32,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"chooseOnArgument","class":"ch.lambdaj.function.aggregate.MinOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"MinOnArgument.java","line":32,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"chooseOnArgument","class":"ch.lambdaj.function.aggregate.MinOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:347)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:358)]"],"mutant":{"filename":"MinOnArgument.java","line":32,"block":3,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"chooseOnArgument","class":"ch.lambdaj.function.aggregate.MinOnArgument"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782)]"],"mutant":{"filename":"Min.java","line":22,"block":3,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;","method":"choose","class":"ch.lambdaj.function.aggregate.Min"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Min.java","line":22,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;","method":"choose","class":"ch.lambdaj.function.aggregate.Min"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:749), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:756), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:762)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782)]"],"mutant":{"filename":"Min.java","line":22,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;","method":"choose","class":"ch.lambdaj.function.aggregate.Min"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:195)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$6a3de49d.getCountryName(<generated>), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.forEach(Lambda.java:92), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$8c873a5.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:43), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Text$$EnhancerByCGLIB$$c7145db3.toString(<generated>), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.next(ResettableIteratorOnIterable.java:46), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$bc4f1a1b.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ResettableIteratorOnIterable.java","line":39,"block":2,"id":{"indexes":"[6]","location":{"mdesc":"()Z","method":"hasNext","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterable"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:210)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ac35c09.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$18b2268b.getCountryName(<generated>), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:413), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:415)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.createProxyIterator(ProxyIterator.java:91), ch.lambdaj.Lambda.forEach(Lambda.java:93), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Text$$EnhancerByCGLIB$$75889fa1.toString(<generated>), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.ProxyIterator.iterateOnValues(ProxyIterator.java:67), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$6ac35c09.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ResettableIteratorOnIterable.java","line":46,"block":3,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"next","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterable"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:42), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:42), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:42), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:42), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getLastName(<generated>), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:736), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIllegalForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testIllegalForEach(LambdaTest.java:195)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachThrowingException(LambdaTest.java:92)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinStrings(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testJoinStrings(LambdaTest.java:990)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:675)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.mock.Exposure.toString(Exposure.java:64), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:17), ch.lambdaj.function.convert.DefaultStringConverter.convert(DefaultStringConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extractString(Lambda.java:1091), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1075)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:42), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Exposure$$EnhancerByCGLIB$$28eef337.getCountryName(<generated>), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:954)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachForProxy(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testForEachForProxy(LambdaTest.java:140)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.select(Lambda.java:330), ch.lambdaj.Lambda.select(Lambda.java:357), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.Lambda.forEach(Lambda.java:91), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$BigDecimalWrapper$$EnhancerByLambdajWithCGLIB$$4f73df6f.getBigDecimal(<generated>), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1165)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.Concat.aggregate(Concat.java:42), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Text$$EnhancerByCGLIB$$85c56c4d.toString(<generated>), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.util.iterator.ResettableIteratorOnIterable.hasNext(ResettableIteratorOnIterable.java:39), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$7b0028b5.getAge(<generated>), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:717)]"],"mutant":{"filename":"ResettableIteratorOnIterable.java","line":25,"block":0,"id":{"indexes":"[13]","location":{"mdesc":"(Ljava\/lang\/Iterable;)V","method":"<init>","class":"ch.lambdaj.util.iterator.ResettableIteratorOnIterable"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"Max.java","line":22,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;","method":"choose","class":"ch.lambdaj.function.aggregate.Max"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:751), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:758), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:764)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Max.java","line":22,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;","method":"choose","class":"ch.lambdaj.function.aggregate.Max"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]"],"mutant":{"filename":"Max.java","line":22,"block":3,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;","method":"choose","class":"ch.lambdaj.function.aggregate.Max"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770)]"],"mutant":{"filename":"SumDouble.java","line":28,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Double;Ljava\/lang\/Double;)Ljava\/lang\/Double;","method":"aggregate","class":"ch.lambdaj.function.aggregate.SumDouble"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:28), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770)]"],"mutant":{"filename":"SumDouble.java","line":28,"block":1,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Double;Ljava\/lang\/Double;)Ljava\/lang\/Double;","method":"aggregate","class":"ch.lambdaj.function.aggregate.SumDouble"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]"],"mutant":{"filename":"ComparatorUtil.java","line":90,"block":1,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DescendingIgnoreCaseArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:329), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:331), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]"],"mutant":{"filename":"ComparatorUtil.java","line":90,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DescendingIgnoreCaseArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:793)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:805), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:808), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:811)]"],"mutant":{"filename":"SumInteger.java","line":28,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Integer;Ljava\/lang\/Integer;)Ljava\/lang\/Integer;","method":"aggregate","class":"ch.lambdaj.function.aggregate.SumInteger"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]"],"mutant":{"filename":"SumInteger.java","line":28,"block":1,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Integer;Ljava\/lang\/Integer;)Ljava\/lang\/Integer;","method":"aggregate","class":"ch.lambdaj.function.aggregate.SumInteger"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:24), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]"],"mutant":{"filename":"StringPropertyExtractor.java","line":24,"block":1,"id":{"indexes":"[10]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/String;","method":"convert","class":"ch.lambdaj.function.convert.StringPropertyExtractor"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1138)]"],"mutant":{"filename":"StringPropertyExtractor.java","line":24,"block":3,"id":{"indexes":"[17]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/String;","method":"convert","class":"ch.lambdaj.function.convert.StringPropertyExtractor"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.Lambda.select(Lambda.java:332), ch.lambdaj.Lambda.select(Lambda.java:345), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]"],"mutant":{"filename":"LambdaJMatcher.java","line":34,"block":2,"id":{"indexes":"[14]","location":{"mdesc":"(Lorg\/hamcrest\/Matcher;)Lch\/lambdaj\/function\/matcher\/LambdaJMatcher;","method":"or","class":"ch.lambdaj.function.matcher.LambdaJMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"DefaultStringConverter.java","line":17,"block":3,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/String;","method":"convert","class":"ch.lambdaj.function.convert.DefaultStringConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1076), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractString(LambdaTest.java:1078)]"],"mutant":{"filename":"DefaultStringConverter.java","line":17,"block":1,"id":{"indexes":"[4]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/String;","method":"convert","class":"ch.lambdaj.function.convert.DefaultStringConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]"],"mutant":{"filename":"AliasedArgumentConverter.java","line":47,"block":2,"id":{"indexes":"[9]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"getValue","class":"ch.lambdaj.function.convert.AliasedArgumentConverter$1"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:523), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:525)]"],"mutant":{"filename":"AliasedArgumentConverter.java","line":46,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"()Ljava\/lang\/String;","method":"getKey","class":"ch.lambdaj.function.convert.AliasedArgumentConverter$1"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]"],"mutant":{"filename":"ClassImposterizer.java","line":94,"block":3,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;)I","method":"accept","class":"ch.lambdaj.proxy.ClassImposterizer$3"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:178)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]"],"mutant":{"filename":"ClassImposterizer.java","line":94,"block":1,"id":{"indexes":"[5]","location":{"mdesc":"(Ljava\/lang\/reflect\/Method;)I","method":"accept","class":"ch.lambdaj.proxy.ClassImposterizer$3"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767)]"],"mutant":{"filename":"SumLong.java","line":28,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Long;Ljava\/lang\/Long;)Ljava\/lang\/Long;","method":"aggregate","class":"ch.lambdaj.function.aggregate.SumLong"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.MathMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:28), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767)]"],"mutant":{"filename":"SumLong.java","line":28,"block":1,"id":{"indexes":"[9]","location":{"mdesc":"(Ljava\/lang\/Long;Ljava\/lang\/Long;)Ljava\/lang\/Long;","method":"aggregate","class":"ch.lambdaj.function.aggregate.SumLong"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]"],"mutant":{"filename":"ComparatorUtil.java","line":67,"block":1,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DescendingArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:302)]"],"mutant":{"filename":"ComparatorUtil.java","line":67,"block":1,"id":{"indexes":"[11]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ComparatorUtil$DescendingArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]"],"mutant":{"filename":"HasArgumentWithValue.java","line":79,"block":1,"id":{"indexes":"[6]","location":{"mdesc":"(Ljava\/lang\/Object;)Z","method":"matches","class":"ch.lambdaj.function.matcher.HasArgumentWithValue$BooleanMatcher"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctAge(LambdaTest.java:438)]"],"mutant":{"filename":"PropertyComparator.java","line":34,"block":1,"id":{"indexes":"[12]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.PropertyComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSumInteger(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testSumInteger(LambdaTest.java:686)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimal(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumBigDecimal(LambdaTest.java:693)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:28), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:28), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:28), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:28), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:28), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:28), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:28), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:28), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:28), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:28), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testPlainSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:747), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:754), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:760), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:28), ch.lambdaj.function.aggregate.SumLong.aggregate(SumLong.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:767), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:28), ch.lambdaj.function.aggregate.SumDouble.aggregate(SumDouble.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:770), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:587), ch.lambdaj.LambdaTest.testPlainSumMinMaxFrom(LambdaTest.java:773)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:50), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$8e08c7c9.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:50), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$8e08c7c9.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:50), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$8e08c7c9.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:50), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.ProxyAggregator.invoke(ProxyAggregator.java:29), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$8e08c7c9.getAge(<generated>), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:28), ch.lambdaj.function.aggregate.SumInteger.aggregate(SumInteger.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:58), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:41), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedSum(Lambda.java:606), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:50), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:39), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:26), ch.lambdaj.function.aggregate.Sum.aggregate(Sum.java:1), ch.lambdaj.function.aggregate.PairAggregator.aggregate(PairAggregator.java:24), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:18), ch.lambdaj.function.aggregate.Avg.aggregate(Avg.java:1), ch.lambdaj.Lambda.aggregate(Lambda.java:525), ch.lambdaj.Lambda.typedAvg(Lambda.java:691), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]"],"mutant":{"filename":"InitializedPairAggregator.java","line":27,"block":1,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"emptyItem","class":"ch.lambdaj.function.aggregate.InitializedPairAggregator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:474), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:476), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:478), ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:484)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:460), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]"],"mutant":{"filename":"Invocation.java","line":140,"block":1,"id":{"indexes":"[5]","location":{"mdesc":"()Ljava\/lang\/Object;","method":"get","class":"ch.lambdaj.function.argument.Invocation$StrongParameterReference"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:32), ch.lambdaj.function.convert.ProjectConverter.convert(ProjectConverter.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1160), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]"],"mutant":{"filename":"AliasedArgumentConverter.java","line":45,"block":2,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/util\/Map$Entry;","method":"convert","class":"ch.lambdaj.function.convert.AliasedArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.createArgumentPlaceholder(ArgumentsFactory.java:182), ch.lambdaj.function.argument.ArgumentsFactory.createPlaceholder(ArgumentsFactory.java:70), ch.lambdaj.function.argument.ArgumentsFactory.registerNewArgument(ArgumentsFactory.java:58), ch.lambdaj.function.argument.ArgumentsFactory.createArgument(ArgumentsFactory.java:50), ch.lambdaj.function.argument.ProxyArgument.invoke(ProxyArgument.java:36), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$b95a11a0.isYoungerThan(<generated>), ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:459)]"],"mutant":{"filename":"ArgumentsFactory.java","line":103,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"()Lch\/lambdaj\/function\/argument\/ArgumentsFactory$LimitedValuesArgumentHolder;","method":"initialValue","class":"ch.lambdaj.function.argument.ArgumentsFactory$1"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testStringPropertyExtractor(LambdaTest.java:1127)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractProperty(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1086), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtractProperty(LambdaTest.java:1088)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNestedStringPropertyExtractor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.PropertyExtractor.convert(PropertyExtractor.java:30), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:23), ch.lambdaj.function.convert.StringPropertyExtractor.convert(StringPropertyExtractor.java:1), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.LambdaTest.testNestedStringPropertyExtractor(LambdaTest.java:1135)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvert(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvert(LambdaTest.java:1097)]"],"mutant":{"filename":"PropertyExtractor.java","line":30,"block":1,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"convert","class":"ch.lambdaj.function.convert.PropertyExtractor"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":[],"mutant":{"filename":"ClassImposterizer.java","line":70,"block":1,"id":{"indexes":"[4]","location":{"mdesc":"()Ljava\/lang\/String;","method":"getTag","class":"ch.lambdaj.proxy.ClassImposterizer$1"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:257), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:259), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:261), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:263)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:271), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:273), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:275), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:279)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:311), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:313), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:315), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:317), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:320), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:322), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:324), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:326), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:333), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:335)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:287), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:289), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:291), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:293), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:296), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:298), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:300)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:371), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:373)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:446)]"],"mutant":{"filename":"ArgumentComparator.java","line":65,"block":4,"id":{"indexes":"[14]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/Object;)I","method":"compare","class":"ch.lambdaj.function.compare.ArgumentComparator"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFailingForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachThrowingException(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidCollect(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnFailingMethod(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEach(LambdaTest.java:80)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptyJoinFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:961), ch.lambdaj.LambdaTest.testEmptyJoinFrom(LambdaTest.java:963)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnArray(LambdaTest.java:110)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testEmptySumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:738), ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.getAge(<generated>), ch.lambdaj.LambdaTest.testEmptySumMinMaxFrom(LambdaTest.java:740)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachOnIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachOnIterator(LambdaTest.java:100)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnNull(LambdaTest.java:224)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1148)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectFirst(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectFirst(LambdaTest.java:909)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnEnumMustFailWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnEnumMustFailWithHaving(LambdaTest.java:511)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHaving(LambdaTest.java:384)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAge(LambdaTest.java:256)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeWithNull(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeWithNull(LambdaTest.java:270)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumMinMaxFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:667), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:669), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:671), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:673), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:676), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testSumMinMaxFrom(LambdaTest.java:679)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.Lambda.count(Lambda.java:294), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1113)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFilterWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testFilterWithHaving(LambdaTest.java:613)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.function.convert.ConstructorArgumentConverter.<init>(ConstructorArgumentConverter.java:35), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectWithHavingInOr(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectWithHavingInOr(LambdaTest.java:422)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.index(Lambda.java:1133), ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1104)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldest(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldest(LambdaTest.java:343)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFindOldestOnArray(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.aggregate.ChooserOnArgument.<init>(ChooserOnArgument.java:23), ch.lambdaj.function.aggregate.MaxOnArgument.<init>(MaxOnArgument.java:18), ch.lambdaj.Lambda.selectMax(Lambda.java:496), ch.lambdaj.LambdaTest.testFindOldestOnArray(LambdaTest.java:354)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectIteratorWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectIteratorWithHaving(LambdaTest.java:397)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortIgnoreCase(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortIgnoreCase(LambdaTest.java:310)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnAgeArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.Lambda.sort(Lambda.java:249), ch.lambdaj.Lambda.sort(Lambda.java:236), ch.lambdaj.LambdaTest.testSortOnAgeArgument(LambdaTest.java:286)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSortOnNameLenght(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:47), ch.lambdaj.Lambda.sort(Lambda.java:264), ch.lambdaj.LambdaTest.testSortOnNameLenght(LambdaTest.java:365)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumOnEmptyList(LambdaTest.java:652)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.min(Lambda.java:761), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.aggregate(Lambda.java:540), ch.lambdaj.Lambda.max(Lambda.java:833), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.collect(Lambda.java:217), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:854)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.compare.ArgumentComparator.<init>(ArgumentComparator.java:29), ch.lambdaj.Lambda.selectDistinctArgument(Lambda.java:458), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:445)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectUnique(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectUnique(LambdaTest.java:883)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProject(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.AliasedArgumentConverter.<init>(AliasedArgumentConverter.java:37), ch.lambdaj.Lambda.as(Lambda.java:1180), ch.lambdaj.LambdaTest.testProject(LambdaTest.java:519)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnBooleanWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectOnBooleanWithHaving(LambdaTest.java:481)]","Description [testClass=ch.lambdaj.LambdaTest, name=testJoinFrom(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testJoinFrom(LambdaTest.java:955)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnDateWithHaving(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnDateWithHaving(LambdaTest.java:499)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectOnForEach(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.matcher.HasArgumentWithValue.havingValue(HasArgumentWithValue.java:70), ch.lambdaj.Lambda.having(Lambda.java:1204), ch.lambdaj.LambdaTest.testSelectOnForEach(LambdaTest.java:412)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.setBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:791)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.mock.Person$$EnhancerByCGLIB$$669b6f15.setBestFriend(<generated>), ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:802)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extractIterator(Lambda.java:1080), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1043)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1033)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testForEachWithNoEmptyConstructor(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.proxy.InvocationInterceptor.intercept(InvocationInterceptor.java:21), ch.lambdaj.LambdaTest$NoEmptyConstructorPerson$$EnhancerByLambdajWithCGLIB$$60901856.setLastName(<generated>), ch.lambdaj.LambdaTest.testForEachWithNoEmptyConstructor(LambdaTest.java:177)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSumBigDecimalOnEmptyList(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.sum(Lambda.java:600), ch.lambdaj.LambdaTest.testSumBigDecimalOnEmptyList(LambdaTest.java:1168)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConcatUsingMockedString(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testConcatUsingMockedString(LambdaTest.java:984)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.function.convert.ArgumentConverter.<init>(ArgumentConverter.java:29), ch.lambdaj.Lambda.avg(Lambda.java:685), ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:714)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgumentIdentity(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testArgumentIdentity(LambdaTest.java:464)]","Description [testClass=ch.lambdaj.LambdaTest, name=testArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.argument.ArgumentsFactory.actualArgument(ArgumentsFactory.java:92), ch.lambdaj.Lambda.argument(Lambda.java:72), ch.lambdaj.LambdaTest.testArgument(LambdaTest.java:44)]"],"mutant":{"filename":"InvocationInterceptor.java","line":21,"block":1,"id":{"indexes":"[8]","location":{"mdesc":"(Ljava\/lang\/Object;Ljava\/lang\/reflect\/Method;[Ljava\/lang\/Object;Lnet\/sf\/cglib\/proxy\/MethodProxy;)Ljava\/lang\/Object;","method":"intercept","class":"ch.lambdaj.proxy.InvocationInterceptor"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
{"coveredBy":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testInvalidProjectDto(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest)]"],"killing":["Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testIndex(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1149), ch.lambdaj.LambdaTest.testIndex(LambdaTest.java:1151)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCount(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1114), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCount(LambdaTest.java:1116)]","Description [testClass=ch.lambdaj.LambdaTest, name=testProjectDto(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ConstructorArgumentConverter.convert(ConstructorArgumentConverter.java:59), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.project(Lambda.java:1148), ch.lambdaj.LambdaTest.testProjectDto(LambdaTest.java:533)]","Description [testClass=ch.lambdaj.LambdaTest, name=testConvertMap(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testConvertMap(LambdaTest.java:1106)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSumMinMax(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:780), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:782), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testTypedSumMinMax(LambdaTest.java:784)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testCollectAges(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:855), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:857), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:859), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testCollectAges(LambdaTest.java:861)]","Description [testClass=ch.lambdaj.LambdaTest, name=testNullSafeExtract(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.function.convert.ArgumentConverter.convert(ArgumentConverter.java:36), ch.lambdaj.function.convert.ConverterIterator.next(ConverterIterator.java:37), ch.lambdaj.Lambda.convert(Lambda.java:1017), ch.lambdaj.Lambda.extract(Lambda.java:1066), ch.lambdaj.LambdaTest.testNullSafeExtract(LambdaTest.java:1061)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testSelectDistinctOnAge(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:449), ch.lambdaj.LambdaTest.testSelectDistinctOnAge(LambdaTest.java:451)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testRepeatedSum(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:626), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:628), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:630), ch.lambdaj.LambdaTest.testRepeatedSum(LambdaTest.java:632)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedSum2(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedSum2(LambdaTest.java:792)]","Description [testClass=ch.lambdaj.LambdaTest, name=testTypedMixedSums(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testTypedMixedSums(LambdaTest.java:804)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtractIterator(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1044), ch.lambdaj.LambdaTest.testExtractIterator(LambdaTest.java:1046)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testExtract(ch.lambdaj.LambdaTest), assertion=org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1034), org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20), ch.lambdaj.LambdaTest.testExtract(LambdaTest.java:1036)]","Description [testClass=ch.lambdaj.LambdaTest, name=testFloatArgument(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testFloatArgument(LambdaTest.java:1204)]","Description [testClass=ch.lambdaj.LambdaTest, name=testAvg(ch.lambdaj.LambdaTest), assertion=ch.lambdaj.LambdaTest.testAvg(LambdaTest.java:720)]"],"mutant":{"filename":"ArgumentConverter.java","line":36,"block":2,"id":{"indexes":"[7]","location":{"mdesc":"(Ljava\/lang\/Object;)Ljava\/lang\/Object;","method":"convert","class":"ch.lambdaj.function.convert.ArgumentConverter"},"mutator":"org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator"}}}
